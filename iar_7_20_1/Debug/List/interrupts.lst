###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       31/Dec/2017  12:56:28
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\interrupts.c
#    Command line =  
#        -f C:\Users\Vipin\AppData\Local\Temp\EWC758.tmp
#        (C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\interrupts.c -D NRF51 -lC
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List -o
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\bsp\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\application\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -I C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\drivers\ -On -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List\interrupts.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj\interrupts.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\interrupts.c
      1          /**********************************************************************************************************************
      2          File: interrupts.c                                                                
      3          
      4          Description:
      5          This is a interrupts .c file new source code.
      6          System-level interrupt handlers are defined here.  Driver-specific handlers will be found in
      7          their respective source files.
      8          
      9          All SoC interrupts are in soc_integration.c
     10          
     11          This might be too fragmented, so we reserve the right to change it up after we play with it for a while.
     12          
     13          **********************************************************************************************************************/
     14          
     15          #include "configuration.h"
     16          
     17          /***********************************************************************************************************************
     18          Global variable definitions with scope across entire project.
     19          All Global variable names shall start with "G_"
     20          ***********************************************************************************************************************/
     21          /* New variables */

   \                                 In section .bss, align 4
     22          volatile u32 G_u32InterruptsFlags;                     /* Global state flags */
   \                     G_u32InterruptsFlags:
   \   00000000                      DS8 4
     23          
     24          
     25          /*--------------------------------------------------------------------------------------------------------------------*/
     26          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     27          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     28          
     29          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     30          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     31          extern volatile bool G_abButtonDebounceActive[TOTAL_BUTTONS];
     32          extern volatile u32 G_au32ButtonDebounceTimeStart[TOTAL_BUTTONS];
     33          
     34          /***********************************************************************************************************************
     35          Global variable definitions with scope limited to this local application.
     36          Variable names shall start with "Interrupts_" and be declared as static.
     37          ***********************************************************************************************************************/
     38          static u32 Interrupts_u32Timeout;                     /* Timeout counter used across states */
                            ^
Warning[Pe177]: variable "Interrupts_u32Timeout" was declared but never
          referenced
     39          
     40          
     41          /**********************************************************************************************************************
     42          Function Definitions
     43          **********************************************************************************************************************/
     44          
     45          /*--------------------------------------------------------------------------------------------------------------------
     46          Function: InterruptsInitialize
     47          
     48          Description:
     49          Initializes the State Machine and its variables.
     50          
     51          Requires:
     52            - None.
     53          
     54          Promises:
     55            - Returns TRUE if SoftDevice Interrupts are successfully enabled, FALSE otherwise.
     56          */

   \                                 In section .text, align 2, keep-with-next
     57          bool InterruptsInitialize(void)
     58          {
   \                     InterruptsInitialize: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     59          #define SD_PRESENT 1
     60          #ifndef SD_PRESENT  
     61            NVIC_ClearPendingIRQ(RTC1_IRQn);
     62            NVIC_EnableIRQ(RTC1_IRQn);
     63            
     64            NVIC_ClearPendingIRQ(GPIOTE_IRQn);
     65            NVIC_EnableIRQ(GPIOTE_IRQn);
     66          #else
     67            u32 result = NRF_SUCCESS;
   \   00000002   0x2200             MOVS     R2,#+0
     68            
     69            // Must enable the SoftDevice Interrupt first.
     70            result |= sd_nvic_SetPriority(SD_EVT_IRQn, NRF_APP_PRIORITY_LOW);
   \   00000004   0x2103             MOVS     R1,#+3
   \   00000006   0x2016             MOVS     R0,#+22
   \   00000008   0xDF28             SVC      0x28
   \   0000000A   0x0003             MOVS     R3,R0
   \   0000000C   0x4313             ORRS     R3,R3,R2
     71            result |= sd_nvic_EnableIRQ(SD_EVT_IRQn);
   \   0000000E   0x2016             MOVS     R0,#+22
   \   00000010   0xDF23             SVC      0x23
   \   00000012   0x0004             MOVS     R4,R0
   \   00000014   0x431C             ORRS     R4,R4,R3
     72            
     73            // Enable the RTC Peripheral.
     74            result |= sd_nvic_SetPriority(RTC1_IRQn, NRF_APP_PRIORITY_LOW);
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x2011             MOVS     R0,#+17
   \   0000001A   0xDF28             SVC      0x28
   \   0000001C   0x0005             MOVS     R5,R0
   \   0000001E   0x4325             ORRS     R5,R5,R4
     75            result |= sd_nvic_EnableIRQ(RTC1_IRQn);
   \   00000020   0x2011             MOVS     R0,#+17
   \   00000022   0xDF23             SVC      0x23
   \   00000024   0x0006             MOVS     R6,R0
   \   00000026   0x432E             ORRS     R6,R6,R5
     76          
     77            // Enable the GPIOTE Peripheral.
     78            result |= sd_nvic_SetPriority(GPIOTE_IRQn, NRF_APP_PRIORITY_LOW);
   \   00000028   0x2103             MOVS     R1,#+3
   \   0000002A   0x2006             MOVS     R0,#+6
   \   0000002C   0xDF28             SVC      0x28
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0x4331             ORRS     R1,R1,R6
     79            result |= sd_nvic_EnableIRQ(GPIOTE_IRQn);
   \   00000032   0x2006             MOVS     R0,#+6
   \   00000034   0xDF23             SVC      0x23
   \   00000036   0x4308             ORRS     R0,R0,R1
     80          
     81            return (result == NRF_SUCCESS);
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE      ??InterruptsInitialize_0
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xE000             B        ??InterruptsInitialize_1
   \                     ??InterruptsInitialize_0: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??InterruptsInitialize_1: (+1)
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
     82          #endif
     83            
     84          
     85          } /* end InterruptsInitialize() */
     86          
     87          
     88          /*--------------------------------------------------------------------------------------------------------------------*/
     89          /* Handlers                                                                                                  */
     90          /*--------------------------------------------------------------------------------------------------------------------*/
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void HardFault_Handler(u32 u32ProgramCounter_, u32 u32LinkRegister_)
     93          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB500             PUSH     {LR}
     94            (void)u32ProgramCounter_;
     95            (void)u32LinkRegister_;
     96          
     97             while(1); // loop for debugging
   \                     ??HardFault_Handler_0: (+1)
   \   00000002   0xE7FE             B        ??HardFault_Handler_0
     98          }
     99          
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void TIMER1_IRQHandler(void)
    102          { 
   \                     TIMER1_IRQHandler: (+1)
   \   00000000   0xB500             PUSH     {LR}
    103            while(1);
   \                     ??TIMER1_IRQHandler_0: (+1)
   \   00000002   0xE7FE             B        ??TIMER1_IRQHandler_0
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void RTC1_IRQHandler(void)
    107          {
   \                     RTC1_IRQHandler: (+1)
   \   00000000   0xB500             PUSH     {LR}
    108            // Clear the Tick Event
    109            NRF_RTC1->EVENTS_TICK = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR      R1,??DataTable3  ;; 0x40011100
   \   00000006   0x6008             STR      R0,[R1, #+0]
    110            
    111            // Update global counters.
    112            G_u32SystemTime1ms++;
   \   00000008   0x....             LDR      R0,??DataTable3_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x....             LDR      R1,??DataTable3_1
   \   00000010   0x6008             STR      R0,[R1, #+0]
    113            if ((G_u32SystemTime1ms % 1000) == 0)
   \   00000012   0x....             LDR      R0,??DataTable3_1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x21FA             MOVS     R1,#+250
   \   00000018   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000001A   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD104             BNE      ??RTC1_IRQHandler_0
    114            {
    115              G_u32SystemTime1s++;
   \   00000022   0x....             LDR      R0,??DataTable3_2
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x....             LDR      R1,??DataTable3_2
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    116            }
    117          }
   \                     ??RTC1_IRQHandler_0: (+1)
   \   0000002C   0xBD00             POP      {PC}             ;; return
    118          
    119          /*--------------------------------------------------------------------------------------------------------------------
    120          Interrupt handler: SD_EVT_IRQHandler
    121          
    122          Description:
    123          Processes soft device events.
    124          
    125          Requires:
    126            - enabled via sd_nvic_XXX
    127          
    128          Promises:
    129            -  Sets global system flags indicating that BLE and ANT events are pending.
    130               It is possible that either ANT or BLE events OR ANT & BLE events are pending.
    131               The application shall handle all the cases. 
    132          --------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    133          void SD_EVT_IRQHandler(void)
    134          {
    135            /* Set Flag that ANT and BLE Events pending. */
    136            G_u32SystemFlags |= (_SYSTEM_PROTOCOL_EVENT); 
   \                     SWI2_IRQHandler: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3_3
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable3_3
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    137          }
   \   0000000E   0x4770             BX       LR               ;; return
    138          
    139          
    140          /*--------------------------------------------------------------------------------------------------------------------
    141          Interrupt handler: SD_EVT_IRQHandler
    142          
    143          Description:
    144          Processes GPIOTE Events such as Pin and Port InterruptsB
    145          
    146          Requires:
    147            - Enabled via sd_nvic_XXX
    148          
    149          Promises:
    150            - Handles the GPIOTE events for the enabled pins. 
    151          --------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    152          void GPIOTE_IRQHandler(void)
    153          {
   \                     GPIOTE_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    154             // Disable further GPIOTE Interrupts. Button module will reenable it once button is released.
    155             NRF_GPIOTE->INTENCLR = (GPIOTE_INTENCLR_IN0_Msk | GPIOTE_INTENCLR_IN1_Msk | GPIOTE_INTENCLR_IN2_Msk);
   \   00000002   0x2007             MOVS     R0,#+7
   \   00000004   0x....             LDR      R1,??DataTable3_4  ;; 0x40006308
   \   00000006   0x6008             STR      R0,[R1, #+0]
    156          
    157             // Loop over 3 GPIOTE Channels
    158             for (int channel = 0; channel < 3; channel++)
   \   00000008   0x2400             MOVS     R4,#+0
   \                     ??GPIOTE_IRQHandler_0: (+1)
   \   0000000A   0x2C03             CMP      R4,#+3
   \   0000000C   0xDA20             BGE      ??GPIOTE_IRQHandler_1
    159             {
    160                // Check if Interrupt occured on this channel.
    161                if (NRF_GPIOTE->EVENTS_IN[channel] == 1)
   \   0000000E   0x....             LDR      R0,??DataTable3_5  ;; 0x40006100
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x4361             MULS     R1,R4,R1
   \   00000014   0x5840             LDR      R0,[R0, R1]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD118             BNE      ??GPIOTE_IRQHandler_2
    162                {
    163                   u8 button_index = (channel * 2 + channel) + Button_get_active_column();
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x2102             MOVS     R1,#+2
   \   0000001E   0x4348             MULS     R0,R1,R0
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x1845             ADDS     R5,R0,R1
   \   00000024   0x.... 0x....      BL       Button_get_active_column
   \   00000028   0x1828             ADDS     R0,R5,R0
    164                   
    165                   // Clear Channel Interrupt and Set Button Debounce Flags on buttons.
    166                   // SW_ROWx + Active COLx corresponds to the Index of the button being pressed (0-8).
    167                   NRF_GPIOTE->EVENTS_IN[channel] = 0;   // Clear Channel Event.
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x....             LDR      R2,??DataTable3_5  ;; 0x40006100
   \   0000002E   0x2304             MOVS     R3,#+4
   \   00000030   0x4363             MULS     R3,R4,R3
   \   00000032   0x50D1             STR      R1,[R2, R3]
    168                   G_abButtonDebounceActive[button_index] = true;
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x....             LDR      R2,??DataTable3_6
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0x5411             STRB     R1,[R2, R0]
    169                   G_au32ButtonDebounceTimeStart[button_index] = G_u32SystemTime1ms;
   \   0000003C   0x....             LDR      R1,??DataTable3_1
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x....             LDR      R2,??DataTable3_7
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0x2304             MOVS     R3,#+4
   \   00000046   0x4343             MULS     R3,R0,R3
   \   00000048   0x50D1             STR      R1,[R2, R3]
    170                   return;
   \   0000004A   0xE001             B        ??GPIOTE_IRQHandler_3
    171                }
    172             }
   \                     ??GPIOTE_IRQHandler_2: (+1)
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \   0000004E   0xE7DC             B        ??GPIOTE_IRQHandler_0
    173          }
   \                     ??GPIOTE_IRQHandler_1: (+1)
   \                     ??GPIOTE_IRQHandler_3: (+1)
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40011100         DC32     0x40011100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40006308         DC32     0x40006308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40006100         DC32     0x40006100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     G_abButtonDebounceActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     G_au32ButtonDebounceTimeStart
    174          /*--------------------------------------------------------------------------------------------------------------------*/
    175          /* End of File                                                                                                        */
    176          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   GPIOTE_IRQHandler
        16   -> Button_get_active_column
       4   HardFault_Handler
      16   InterruptsInitialize
       4   RTC1_IRQHandler
         4 __aeabi_uidivmod
       0   SWI2_IRQHandler
       4   TIMER1_IRQHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      82  GPIOTE_IRQHandler
       4  G_u32InterruptsFlags
       4  HardFault_Handler
      70  InterruptsInitialize
      46  RTC1_IRQHandler
      16  SWI2_IRQHandler
       4  TIMER1_IRQHandler

 
   4 bytes in section .bss
 254 bytes in section .text
 
 254 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 1
