###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       26/Dec/2017  14:52:54
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\application\bleperipheral_engenuics.c
#    Command line =  
#        -f C:\Users\Vipin\AppData\Local\Temp\EWA8B4.tmp
#        (C:\Users\Vipin\Documents\GitHub\ANTTT\application\bleperipheral_engenuics.c
#        -D NRF51 -lC
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List -o
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\bsp\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\application\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -I C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\drivers\ -On -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List\bleperipheral_engenuics.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj\bleperipheral_engenuics.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\ANTTT\application\bleperipheral_engenuics.c
      1          /**********************************************************************************************************************
      2          File: bleperipheral_engenuics.c                                                                
      3          
      4          Description:
      5          BLE Peripheral Service module for the Engenuics BLE Profile.
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint16_t uint16_decode(uint8_t const *)
   \                     uint16_decode: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x0200             LSLS     R0,R0,#+8
   \   00000006   0x4308             ORRS     R0,R0,R1
   \   00000008   0xB280             UXTH     R0,R0
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool ble_srv_is_notification_enabled(uint8_t *)
   \                     ble_srv_is_notification_enabled: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       uint16_decode
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0x07C0             LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   00000010   0x0FC0             LSRS     R0,R0,#+31
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BPEngenuicsFlags;                       /* Global state flags */
   \                     G_u32BPEngenuicsFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          
     22          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     23          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     24          
     25          
     26          /***********************************************************************************************************************
     27          Global variable definitions with scope limited to this local application.
     28          Variable names shall start with "BPEngenuics_" and be declared as static.
     29          ***********************************************************************************************************************/
     30          static u32 BPEngenuics_u32Timeout;           /* Timeout counter used across states */
                            ^
Warning[Pe177]: variable "BPEngenuics_u32Timeout" was declared but never
          referenced

   \                                 In section .bss, align 1
     31          static u8  uuid_type;                        /* UUID Type for BLEEngenuics service */ 
   \                     uuid_type:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     32          static u16 service_handle;                   /* Handle for the GATTS Service */
   \                     service_handle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     33          static ble_gatts_char_handles_t tx_handles;  /* TX Characteristic Handles */
   \                     tx_handles:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     34          static ble_gatts_char_handles_t rx_handles;  /* RX Characteristic Handles */          
   \                     rx_handles:
   \   00000000                      DS8 8

   \                                 In section .bss, align 2
     35          static u16 conn_handle;                      /* Connection handle indicating if the device is GAP Connected to Client*/
   \                     conn_handle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     36          static bool is_notification_enabled;         /* Flag to indicate if Notifications have been enabled by the Client */
   \                     is_notification_enabled:
   \   00000000                      DS8 1
     37          
     38          /**********************************************************************************************************************
     39          Function Definitions
     40          **********************************************************************************************************************/
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Public functions                                                                                                   */
     44          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     45          bool BPEngenuicsSendData(u8* buffer, u8 size)
     46          {
   \                     BPEngenuicsSendData: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
     47            ble_gatts_hvx_params_t hvx;   // Indication / Notification structure.
     48          
     49            if (size > BPENGENUICS_MAX_CHAR_LEN)
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x7C00             LDRB     R0,[R0, #+16]
   \   0000000A   0x2815             CMP      R0,#+21
   \   0000000C   0xDB01             BLT      ??BPEngenuicsSendData_0
     50              return false;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE026             B        ??BPEngenuicsSendData_1
     51            
     52            // Check that the module is connected AND notifications are enabled.
     53            if ((conn_handle != BLE_CONN_HANDLE_INVALID) && (is_notification_enabled))
   \                     ??BPEngenuicsSendData_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable8
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x....             LDR      R1,??DataTable7  ;; 0xffff
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD020             BEQ      ??BPEngenuicsSendData_2
   \   0000001C   0x....             LDR      R0,??DataTable7_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD01C             BEQ      ??BPEngenuicsSendData_2
     54            {
     55              memset(&hvx, 0, sizeof(hvx));
   \   00000024   0x2510             MOVS     R5,#+16
   \   00000026   0x2600             MOVS     R6,#+0
   \   00000028   0x466F             MOV      R7,SP
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       __aeabi_memset
     56              hvx.handle = tx_handles.value_handle;
   \   00000034   0x....             LDR      R0,??DataTable8_1
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
     57              hvx.p_data = buffer;
   \   0000003C   0x9403             STR      R4,[SP, #+12]
     58              hvx.p_len = (uint16_t*)&size;
   \   0000003E   0xA804             ADD      R0,SP,#+16
   \   00000040   0x9002             STR      R0,[SP, #+8]
     59              hvx.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x7088             STRB     R0,[R1, #+2]
     60              
     61              return (sd_ble_gatts_hvx(conn_handle, &hvx) == NRF_SUCCESS);
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x....             LDR      R0,??DataTable8
   \   0000004C   0x8800             LDRH     R0,[R0, #+0]
   \   0000004E   0xDFA6             SVC      0xA6
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD101             BNE      ??BPEngenuicsSendData_3
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE000             B        ??BPEngenuicsSendData_4
   \                     ??BPEngenuicsSendData_3: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsSendData_4: (+1)
   \   0000005A   0xB2C0             UXTB     R0,R0
   \   0000005C   0xE000             B        ??BPEngenuicsSendData_1
     62            }
     63            else
     64            {
     65              return false;
   \                     ??BPEngenuicsSendData_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsSendData_1: (+1)
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
     66            }
     67          }
     68          
     69          /*--------------------------------------------------------------------------------------------------------------------*/
     70          /* Protected functions                                                                                                */
     71          /*--------------------------------------------------------------------------------------------------------------------*/
     72          /*--------------------------------------------------------------------------------------------------------------------
     73          Function: BPEngenuicsInitialize
     74          
     75          Description:
     76          Initializes the State Machine and its variables.
     77          
     78          Requires:
     79             - Called after the stack has been initialized.
     80             - Called from the BLEIntegrationHandlerInitialize
     81          
     82          Promises:
     83            - Characteristics are registered to the Services.
     84            - Service is registered with the stack for operations.
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          bool BPEngenuicsInitialize(void)
     87          {
   \                     BPEngenuicsInitialize: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     88            u32 error;
     89          
     90            // Initialize.
     91            conn_handle = BLE_CONN_HANDLE_INVALID;
   \   00000002   0x....             LDR      R0,??DataTable7  ;; 0xffff
   \   00000004   0x....             LDR      R1,??DataTable8
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     92            is_notification_enabled = false;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable7_1
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
     93          
     94            // Add the services and characteristics.
     95            error = BPEngenuicsAddService();
   \   0000000E   0x.... 0x....      BL       BPEngenuicsAddService
   \   00000012   0x0004             MOVS     R4,R0
     96            error |= BPEngenuicsAddRxCharacteristic();
   \   00000014   0x.... 0x....      BL       BPEngenuicsAddRxCharacteristic
   \   00000018   0x0005             MOVS     R5,R0
   \   0000001A   0x4325             ORRS     R5,R5,R4
     97            error |= BPEngenuicsAddTxCharacteristic();
   \   0000001C   0x.... 0x....      BL       BPEngenuicsAddTxCharacteristic
   \   00000020   0x4328             ORRS     R0,R0,R5
     98          
     99            return (error == NRF_SUCCESS);
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD101             BNE      ??BPEngenuicsInitialize_0
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B        ??BPEngenuicsInitialize_1
   \                     ??BPEngenuicsInitialize_0: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsInitialize_1: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    100          } /* end BPEngenuicsInitialize() */
    101          
    102          /*--------------------------------------------------------------------------------------------------------------------
    103          Function: BPEngenuicsOnConnect
    104          
    105          Description:
    106          Initializes the State Machine and its variables.
    107          
    108          Requires:
    109             - BPEngenuicsInitialize has been called.
    110          
    111          Promises:
    112            - Notifies the module that it is in the connected state.
    113          */

   \                                 In section .text, align 2, keep-with-next
    114          void BPEngenuicsOnConnect(ble_evt_t* evt)
    115          {
    116            // Update the conn_handle. Module knows that it is connected to a client.
    117            conn_handle = evt->evt.gap_evt.conn_handle;
   \                     BPEngenuicsOnConnect: (+1)
   \   00000000   0x8881             LDRH     R1,[R0, #+4]
   \   00000002   0x....             LDR      R2,??DataTable8
   \   00000004   0x8011             STRH     R1,[R2, #+0]
    118          }
   \   00000006   0x4770             BX       LR               ;; return
    119          
    120          /*--------------------------------------------------------------------------------------------------------------------
    121          Function: BPEngenuicsOnDisconnect
    122          
    123          Description:
    124          Initializes the State Machine and its variables.
    125          
    126          Requires:
    127             - BPEngenuicsInitialize has been called
    128          
    129          Promises:
    130            - Notifies the module that it is in the disconnected state.
    131          */

   \                                 In section .text, align 2, keep-with-next
    132          void BPEngenuicsOnDisconnect(void)
    133          {
    134            // Invalidate the conn_handle. Module knows that it is in a disconnected state
    135            conn_handle = BLE_CONN_HANDLE_INVALID;
   \                     BPEngenuicsOnDisconnect: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7  ;; 0xffff
   \   00000002   0x....             LDR      R1,??DataTable8
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    136          }
   \   00000006   0x4770             BX       LR               ;; return
    137          
    138          /*--------------------------------------------------------------------------------------------------------------------
    139          Function: BPEngenuicsOnWrite
    140          
    141          Description:
    142          Handles the Service enabling/disabling. Handles the Value Char writes from Client.
    143          
    144          Requires:
    145             - Called after the module has been initialized.
    146             - evt is the ble_evt_t* containing the appropriate GATTS Write information
    147             
    148          Promises:
    149            - Handles Enabling/Disabling on the BPEngenucis TX Value Characteristic.
    150            - Handles Rx Messages sent from the client on the RX Value Characteristic.
    151          */

   \                                 In section .text, align 2, keep-with-next
    152          void BPEngenuicsOnWrite(ble_evt_t* evt)
    153          {
   \                     BPEngenuicsOnWrite: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    154             // Create our ble_gatts_evt_write_t object.
    155              ble_gatts_evt_write_t* evt_write = &evt->evt.gatts_evt.params.write;
   \   00000004   0x1DA5             ADDS     R5,R4,#+6
    156              
    157              // Check if it is the TX Handle CCCD write event and len is 2.
    158              if ((evt_write->handle == tx_handles.cccd_handle) && (evt_write->len == 2))
   \   00000006   0x8828             LDRH     R0,[R5, #+0]
   \   00000008   0x....             LDR      R1,??DataTable8_1
   \   0000000A   0x8889             LDRH     R1,[R1, #+4]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD110             BNE      ??BPEngenuicsOnWrite_0
   \   00000010   0x8B28             LDRH     R0,[R5, #+24]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD10D             BNE      ??BPEngenuicsOnWrite_0
    159              {
    160                // Check if service needs to be enabled/disabled.
    161                if (ble_srv_is_notification_enabled(evt_write->data))
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x301A             ADDS     R0,R0,#+26
   \   0000001A   0x.... 0x....      BL       ble_srv_is_notification_enabled
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD003             BEQ      ??BPEngenuicsOnWrite_1
    162                {
    163                  is_notification_enabled = true;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR      R1,??DataTable7_1
   \   00000026   0x7008             STRB     R0,[R1, #+0]
   \   00000028   0xE00E             B        ??BPEngenuicsOnWrite_2
    164                }
    165                else
    166                {
    167                  is_notification_enabled = false;
   \                     ??BPEngenuicsOnWrite_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR      R1,??DataTable7_1
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
   \   00000030   0xE00A             B        ??BPEngenuicsOnWrite_2
    168                }
    169              }
    170              else if (evt_write->handle == rx_handles.value_handle)    
   \                     ??BPEngenuicsOnWrite_0: (+1)
   \   00000032   0x8828             LDRH     R0,[R5, #+0]
   \   00000034   0x....             LDR      R1,??DataTable8_2
   \   00000036   0x8809             LDRH     R1,[R1, #+0]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD105             BNE      ??BPEngenuicsOnWrite_2
    171              {
    172                callback_bleperipheral_engenuics_data_rx(evt_write->data, evt_write->len);
   \   0000003C   0x8B29             LDRH     R1,[R5, #+24]
   \   0000003E   0xB2C9             UXTB     R1,R1
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x301A             ADDS     R0,R0,#+26
   \   00000044   0x.... 0x....      BL       callback_bleperipheral_engenuics_data_rx
    173              }    
    174          }
   \                     ??BPEngenuicsOnWrite_2: (+1)
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    175          
    176          
    177          
    178          /*--------------------------------------------------------------------------------------------------------------------*/
    179          /* Private functions                                                                                                  */
    180          /*--------------------------------------------------------------------------------------------------------------------*/
    181          /*--------------------------------------------------------------------------------------------------------------------
    182          Function: BPEngenuicsAddService
    183          
    184          Description:
    185          Registers the service to the
    186          
    187          Requires:
    188             - Called after the module has been intialized.
    189             
    190          Promises:
    191            - Adds the BPEngenuics Rx Service.
    192            - Registers a properietary 128bit Service UUID base.
    193            - Followed by 16bit Service identifier. 
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          static u32 BPEngenuicsAddService(void)
    196          {
   \                     BPEngenuicsAddService: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    197             u32 err;
    198             ble_uuid_t ble_uuid;
    199             ble_uuid128_t ble_base_uuid = BPENGENUICS_BASE_UUID;
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x....             LDR      R1,??DataTable8_3
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
    200          
    201             // Add Service UUID with base .
    202             err = sd_ble_uuid_vs_add(&ble_base_uuid, &uuid_type);
   \   0000000E   0x....             LDR      R1,??DataTable8_4
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0xDF62             SVC      0x62
   \   00000014   0x0003             MOVS     R3,R0
    203          
    204             // Add the 16bit unique value to base.
    205             ble_uuid.type = uuid_type;
   \   00000016   0x....             LDR      R0,??DataTable8_4
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    206             ble_uuid.uuid = BPENGENUICS_SERVICE_UUID;
   \   0000001E   0x....             LDR      R0,??DataTable8_5  ;; 0xeeee
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8008             STRH     R0,[R1, #+0]
    207             err = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &service_handle);
   \   00000024   0x....             LDR      R2,??DataTable8_6
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xDFA0             SVC      0xA0
    208          
    209             return err;
   \   0000002C   0xB005             ADD      SP,SP,#+20
   \   0000002E   0xBD00             POP      {PC}             ;; return
    210          }
    211          
    212          
    213          /*--------------------------------------------------------------------------------------------------------------------
    214          Function: BPEngenuicsAddRxcharacteristic
    215          
    216          Description:
    217          Adds the Rx Characteristic to the BLE Service.
    218          
    219          Requires:
    220             - Called during module initialization
    221             
    222          Promises:
    223            - Adds the BPEngenuics Rx Characteristic.
    224          */

   \                                 In section .text, align 2, keep-with-next
    225          static u32 BPEngenuicsAddRxCharacteristic(void)
    226          {
   \                     BPEngenuicsAddRxCharacteristic: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
    227              ble_gatts_char_md_t rxchar_metadata;
    228              ble_gatts_attr_t    attr_char_value;
    229              ble_uuid_t          ble_uuid;
    230              ble_gatts_attr_md_t attr_md;
    231          
    232             // Metadata for the Rx Characteristic.
    233              memset(&rxchar_metadata, 0, sizeof(rxchar_metadata));
   \   00000004   0x201C             MOVS     R0,#+28
   \   00000006   0x9004             STR      R0,[SP, #+16]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0xAC0A             ADD      R4,SP,#+40
   \   0000000E   0x9A03             LDR      R2,[SP, #+12]
   \   00000010   0x9904             LDR      R1,[SP, #+16]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    234              rxchar_metadata.char_props.write = 1;
   \   00000018   0xA80A             ADD      R0,SP,#+40
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2108             MOVS     R1,#+8
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0xA80A             ADD      R0,SP,#+40
   \   00000022   0x7001             STRB     R1,[R0, #+0]
    235              rxchar_metadata.char_props.write_wo_resp = 1;
   \   00000024   0xA80A             ADD      R0,SP,#+40
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x4301             ORRS     R1,R1,R0
   \   0000002C   0xA80A             ADD      R0,SP,#+40
   \   0000002E   0x7001             STRB     R1,[R0, #+0]
    236            
    237              // Load the RX CHAR UUID.
    238              ble_uuid.type = uuid_type;
   \   00000030   0x....             LDR      R0,??DataTable8_4
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0x7088             STRB     R0,[R1, #+2]
    239              ble_uuid.uuid = BPENGENUICS_RX_CHAR_UUID;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x8088             STRH     R0,[R1, #+4]
    240          
    241              // Metadata for the Rx Attribute.
    242              memset(&attr_md, 0, sizeof(attr_md));
   \   0000003E   0x2003             MOVS     R0,#+3
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x2400             MOVS     R4,#+0
   \   00000044   0x466D             MOV      R5,SP
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x9902             LDR      R1,[SP, #+8]
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x.... 0x....      BL       __aeabi_memset
    243              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x21F0             MOVS     R1,#+240
   \   00000056   0x4001             ANDS     R1,R1,R0
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x4308             ORRS     R0,R0,R1
   \   0000005C   0x4669             MOV      R1,SP
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000066   0x0F00             LSRS     R0,R0,#+28
   \   00000068   0x2110             MOVS     R1,#+16
   \   0000006A   0x4301             ORRS     R1,R1,R0
   \   0000006C   0x4668             MOV      R0,SP
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    244              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x7840             LDRB     R0,[R0, #+1]
   \   00000074   0x21F0             MOVS     R1,#+240
   \   00000076   0x4001             ANDS     R1,R1,R0
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x4308             ORRS     R0,R0,R1
   \   0000007C   0x4669             MOV      R1,SP
   \   0000007E   0x7048             STRB     R0,[R1, #+1]
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x7840             LDRB     R0,[R0, #+1]
   \   00000084   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000086   0x0F00             LSRS     R0,R0,#+28
   \   00000088   0x2110             MOVS     R1,#+16
   \   0000008A   0x4301             ORRS     R1,R1,R0
   \   0000008C   0x4668             MOV      R0,SP
   \   0000008E   0x7041             STRB     R1,[R0, #+1]
    245              attr_md.vloc    = BLE_GATTS_VLOC_STACK;
   \   00000090   0x4668             MOV      R0,SP
   \   00000092   0x7880             LDRB     R0,[R0, #+2]
   \   00000094   0x21F9             MOVS     R1,#+249
   \   00000096   0x4001             ANDS     R1,R1,R0
   \   00000098   0x2002             MOVS     R0,#+2
   \   0000009A   0x4308             ORRS     R0,R0,R1
   \   0000009C   0x4669             MOV      R1,SP
   \   0000009E   0x7088             STRB     R0,[R1, #+2]
    246              attr_md.vlen    = 1;
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x7880             LDRB     R0,[R0, #+2]
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0x4301             ORRS     R1,R1,R0
   \   000000A8   0x4668             MOV      R0,SP
   \   000000AA   0x7081             STRB     R1,[R0, #+2]
    247          
    248              // Setup of the Rx Attribute.
    249              memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   000000AC   0x2514             MOVS     R5,#+20
   \   000000AE   0x2600             MOVS     R6,#+0
   \   000000B0   0xAF05             ADD      R7,SP,#+20
   \   000000B2   0x0032             MOVS     R2,R6
   \   000000B4   0x0029             MOVS     R1,R5
   \   000000B6   0x0038             MOVS     R0,R7
   \   000000B8   0x.... 0x....      BL       __aeabi_memset
    250              attr_char_value.p_uuid    = &ble_uuid;
   \   000000BC   0xA801             ADD      R0,SP,#+4
   \   000000BE   0x9005             STR      R0,[SP, #+20]
    251              attr_char_value.p_attr_md = &attr_md;
   \   000000C0   0x4668             MOV      R0,SP
   \   000000C2   0x9006             STR      R0,[SP, #+24]
    252              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
   \   000000C4   0x2014             MOVS     R0,#+20
   \   000000C6   0xA905             ADD      R1,SP,#+20
   \   000000C8   0x8108             STRH     R0,[R1, #+8]
    253              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
   \   000000CA   0x2014             MOVS     R0,#+20
   \   000000CC   0xA905             ADD      R1,SP,#+20
   \   000000CE   0x8188             STRH     R0,[R1, #+12]
    254          
    255              return sd_ble_gatts_characteristic_add(service_handle, &rxchar_metadata, &attr_char_value, &rx_handles);
   \   000000D0   0x....             LDR      R3,??DataTable8_2
   \   000000D2   0xAA05             ADD      R2,SP,#+20
   \   000000D4   0xA90A             ADD      R1,SP,#+40
   \   000000D6   0x....             LDR      R0,??DataTable8_6
   \   000000D8   0x8800             LDRH     R0,[R0, #+0]
   \   000000DA   0xDFA2             SVC      0xA2
   \   000000DC   0xB011             ADD      SP,SP,#+68
   \   000000DE   0xBDF0             POP      {R4-R7,PC}       ;; return
    256          }
    257          
    258          /*--------------------------------------------------------------------------------------------------------------------
    259          Function: BPEngenuicsAddTxcharacteristic
    260          
    261          Description:
    262          Adds the Tx Characteristic to the BLE Service.
    263          
    264          Requires:
    265             - Called during module initialization.
    266             
    267          Promises:
    268            - Adds the BPEngenuics Tx Characteristic.
    269          */

   \                                 In section .text, align 2, keep-with-next
    270          static u32 BPEngenuicsAddTxCharacteristic(void)
    271          {
   \                     BPEngenuicsAddTxCharacteristic: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    272              ble_gatts_char_md_t txchar_metadata;
    273              ble_gatts_attr_md_t cccd_md;
    274              ble_gatts_attr_t    attr_char_value;
    275              ble_uuid_t          ble_uuid;
    276              ble_gatts_attr_md_t attr_md;
    277          
    278              // ClientConfigurationDescriptor Metadata.
    279              memset(&cccd_md, 0, sizeof(cccd_md));
   \   00000004   0x2003             MOVS     R0,#+3
   \   00000006   0x9007             STR      R0,[SP, #+28]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9006             STR      R0,[SP, #+24]
   \   0000000C   0xAC01             ADD      R4,SP,#+4
   \   0000000E   0x9A06             LDR      R2,[SP, #+24]
   \   00000010   0x9907             LDR      R1,[SP, #+28]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_memset
    280              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x7900             LDRB     R0,[R0, #+4]
   \   0000001C   0x21F0             MOVS     R1,#+240
   \   0000001E   0x4001             ANDS     R1,R1,R0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x4308             ORRS     R0,R0,R1
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x7108             STRB     R0,[R1, #+4]
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x7900             LDRB     R0,[R0, #+4]
   \   0000002C   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   0000002E   0x0F00             LSRS     R0,R0,#+28
   \   00000030   0x2110             MOVS     R1,#+16
   \   00000032   0x4301             ORRS     R1,R1,R0
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x7101             STRB     R1,[R0, #+4]
    281              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x7840             LDRB     R0,[R0, #+1]
   \   0000003C   0x21F0             MOVS     R1,#+240
   \   0000003E   0x4001             ANDS     R1,R1,R0
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x4308             ORRS     R0,R0,R1
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x7048             STRB     R0,[R1, #+1]
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x7840             LDRB     R0,[R0, #+1]
   \   0000004C   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   0000004E   0x0F00             LSRS     R0,R0,#+28
   \   00000050   0x2110             MOVS     R1,#+16
   \   00000052   0x4301             ORRS     R1,R1,R0
   \   00000054   0xA801             ADD      R0,SP,#+4
   \   00000056   0x7041             STRB     R1,[R0, #+1]
    282          
    283              // Location of CCCD characteristic is on user stack.
    284              cccd_md.vloc = BLE_GATTS_VLOC_STACK;
   \   00000058   0xA801             ADD      R0,SP,#+4
   \   0000005A   0x7880             LDRB     R0,[R0, #+2]
   \   0000005C   0x21F9             MOVS     R1,#+249
   \   0000005E   0x4001             ANDS     R1,R1,R0
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x4308             ORRS     R0,R0,R1
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x7088             STRB     R0,[R1, #+2]
    285          
    286              // Metadata for the Tx Characteristic.
    287              memset(&txchar_metadata, 0, sizeof(txchar_metadata));
   \   00000068   0x201C             MOVS     R0,#+28
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0xAC0D             ADD      R4,SP,#+52
   \   00000072   0x9A04             LDR      R2,[SP, #+16]
   \   00000074   0x9905             LDR      R1,[SP, #+20]
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       __aeabi_memset
    288              txchar_metadata.char_props.notify = 1;
   \   0000007C   0xA80D             ADD      R0,SP,#+52
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x2110             MOVS     R1,#+16
   \   00000082   0x4301             ORRS     R1,R1,R0
   \   00000084   0xA80D             ADD      R0,SP,#+52
   \   00000086   0x7001             STRB     R1,[R0, #+0]
    289              txchar_metadata.p_cccd_md         = &cccd_md;
   \   00000088   0xA801             ADD      R0,SP,#+4
   \   0000008A   0x9012             STR      R0,[SP, #+72]
    290          
    291              // Load the TX CHAR UUID.
    292              ble_uuid.type = uuid_type;
   \   0000008C   0x....             LDR      R0,??DataTable8_4
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0xA902             ADD      R1,SP,#+8
   \   00000092   0x7088             STRB     R0,[R1, #+2]
    293              ble_uuid.uuid = BPENGENUICS_TX_CHAR_UUID;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x8108             STRH     R0,[R1, #+8]
    294          
    295              // Metadata for the Tx Attribute.
    296              memset(&attr_md, 0, sizeof(attr_md));
   \   0000009A   0x2003             MOVS     R0,#+3
   \   0000009C   0x9003             STR      R0,[SP, #+12]
   \   0000009E   0x2400             MOVS     R4,#+0
   \   000000A0   0x466D             MOV      R5,SP
   \   000000A2   0x0022             MOVS     R2,R4
   \   000000A4   0x9903             LDR      R1,[SP, #+12]
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0x.... 0x....      BL       __aeabi_memset
    297              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
   \   000000AC   0x4668             MOV      R0,SP
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x21F0             MOVS     R1,#+240
   \   000000B2   0x4001             ANDS     R1,R1,R0
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x4308             ORRS     R0,R0,R1
   \   000000B8   0x4669             MOV      R1,SP
   \   000000BA   0x7008             STRB     R0,[R1, #+0]
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000C2   0x0F00             LSRS     R0,R0,#+28
   \   000000C4   0x2110             MOVS     R1,#+16
   \   000000C6   0x4301             ORRS     R1,R1,R0
   \   000000C8   0x4668             MOV      R0,SP
   \   000000CA   0x7001             STRB     R1,[R0, #+0]
    298              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
   \   000000CC   0x4668             MOV      R0,SP
   \   000000CE   0x7840             LDRB     R0,[R0, #+1]
   \   000000D0   0x21F0             MOVS     R1,#+240
   \   000000D2   0x4001             ANDS     R1,R1,R0
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x4308             ORRS     R0,R0,R1
   \   000000D8   0x4669             MOV      R1,SP
   \   000000DA   0x7048             STRB     R0,[R1, #+1]
   \   000000DC   0x4668             MOV      R0,SP
   \   000000DE   0x7840             LDRB     R0,[R0, #+1]
   \   000000E0   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000E2   0x0F00             LSRS     R0,R0,#+28
   \   000000E4   0x2110             MOVS     R1,#+16
   \   000000E6   0x4301             ORRS     R1,R1,R0
   \   000000E8   0x4668             MOV      R0,SP
   \   000000EA   0x7041             STRB     R1,[R0, #+1]
    299              attr_md.vloc    = BLE_GATTS_VLOC_STACK;
   \   000000EC   0x4668             MOV      R0,SP
   \   000000EE   0x7880             LDRB     R0,[R0, #+2]
   \   000000F0   0x21F9             MOVS     R1,#+249
   \   000000F2   0x4001             ANDS     R1,R1,R0
   \   000000F4   0x2002             MOVS     R0,#+2
   \   000000F6   0x4308             ORRS     R0,R0,R1
   \   000000F8   0x4669             MOV      R1,SP
   \   000000FA   0x7088             STRB     R0,[R1, #+2]
    300              attr_md.vlen    = 1;
   \   000000FC   0x4668             MOV      R0,SP
   \   000000FE   0x7880             LDRB     R0,[R0, #+2]
   \   00000100   0x2101             MOVS     R1,#+1
   \   00000102   0x4301             ORRS     R1,R1,R0
   \   00000104   0x4668             MOV      R0,SP
   \   00000106   0x7081             STRB     R1,[R0, #+2]
    301          
    302              // Setup of the Tx Attribute.
    303              memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   00000108   0x2514             MOVS     R5,#+20
   \   0000010A   0x2600             MOVS     R6,#+0
   \   0000010C   0xAF08             ADD      R7,SP,#+32
   \   0000010E   0x0032             MOVS     R2,R6
   \   00000110   0x0029             MOVS     R1,R5
   \   00000112   0x0038             MOVS     R0,R7
   \   00000114   0x.... 0x....      BL       __aeabi_memset
    304              attr_char_value.p_uuid    = &ble_uuid;
   \   00000118   0xA802             ADD      R0,SP,#+8
   \   0000011A   0x9008             STR      R0,[SP, #+32]
    305              attr_char_value.p_attr_md = &attr_md;
   \   0000011C   0x4668             MOV      R0,SP
   \   0000011E   0x9009             STR      R0,[SP, #+36]
    306              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
   \   00000120   0x2014             MOVS     R0,#+20
   \   00000122   0xA908             ADD      R1,SP,#+32
   \   00000124   0x8108             STRH     R0,[R1, #+8]
    307              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
   \   00000126   0x2014             MOVS     R0,#+20
   \   00000128   0xA908             ADD      R1,SP,#+32
   \   0000012A   0x8188             STRH     R0,[R1, #+12]
    308          
    309              return sd_ble_gatts_characteristic_add(service_handle, &txchar_metadata, &attr_char_value, &tx_handles);
   \   0000012C   0x....             LDR      R3,??DataTable8_1
   \   0000012E   0xAA08             ADD      R2,SP,#+32
   \   00000130   0xA90D             ADD      R1,SP,#+52
   \   00000132   0x....             LDR      R0,??DataTable8_6
   \   00000134   0x8800             LDRH     R0,[R0, #+0]
   \   00000136   0xDFA2             SVC      0xA2
   \   00000138   0xB015             ADD      SP,SP,#+84
   \   0000013A   0xBDF0             POP      {R4-R7,PC}       ;; return
    310          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     is_notification_enabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     tx_handles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     rx_handles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     uuid_type

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x0000EEEE         DC32     0xeeee

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     service_handle

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x9E 0xCA          DC8 158, 202, 220, 36, 14, 229, 169, 224, 147, 243, 163, 181, 0, 0, 64
   \              0xDC 0x24    
   \              0x0E 0xE5    
   \              0xA9 0xE0    
   \              0x93 0xF3    
   \              0xA3 0xB5    
   \              0x00 0x00    
   \              0x40         
   \   0000000F   0x6E               DC8 110
    311          
    312          /*--------------------------------------------------------------------------------------------------------------------*/
    313          /* End of File                                                                                                        */
    314          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   BPEngenuicsAddRxCharacteristic
        88   -> __aeabi_memset
      24   BPEngenuicsAddService
        24   -> __aeabi_memcpy4
     104   BPEngenuicsAddTxCharacteristic
       104   -> __aeabi_memset
      16   BPEngenuicsInitialize
        16   -> BPEngenuicsAddRxCharacteristic
        16   -> BPEngenuicsAddService
        16   -> BPEngenuicsAddTxCharacteristic
       0   BPEngenuicsOnConnect
       0   BPEngenuicsOnDisconnect
      16   BPEngenuicsOnWrite
        16   -> ble_srv_is_notification_enabled
        16   -> callback_bleperipheral_engenuics_data_rx
      40   BPEngenuicsSendData
        40   -> __aeabi_memset
       8   ble_srv_is_notification_enabled
         8   -> uint16_decode
       0   uint16_decode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
      16  ?_0
     224  BPEngenuicsAddRxCharacteristic
      48  BPEngenuicsAddService
     316  BPEngenuicsAddTxCharacteristic
      48  BPEngenuicsInitialize
       8  BPEngenuicsOnConnect
       8  BPEngenuicsOnDisconnect
      74  BPEngenuicsOnWrite
     100  BPEngenuicsSendData
       4  G_u32BPEngenuicsFlags
      20  ble_srv_is_notification_enabled
       2  conn_handle
       1  is_notification_enabled
       8  rx_handles
       2  service_handle
       8  tx_handles
      12  uint16_decode
       1  uuid_type

 
  26 bytes in section .bss
  16 bytes in section .rodata
 894 bytes in section .text
 
 894 bytes of CODE  memory
  16 bytes of CONST memory
  26 bytes of DATA  memory

Errors: none
Warnings: 1
