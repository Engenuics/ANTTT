###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       26/Dec/2017  14:52:53
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\ble_integration.c
#    Command line =  
#        -f C:\Users\Vipin\AppData\Local\Temp\EWA612.tmp
#        (C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\ble_integration.c -D NRF51
#        -lC C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List -o
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\bsp\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\application\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -I C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\drivers\ -On -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List\ble_integration.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj\ble_integration.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\ble_integration.c
      1          /**********************************************************************************************************************
      2          File: ble_integration.c                                                                
      3          
      4          Description:
      5          This is a ble_integration .c file new source code
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BLEIntegrationFlags;                 /* Global state flags */
   \                     G_u32BLEIntegrationFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     22          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "SocInt_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          static u32 bleintegration_u32Timeout;                                            /* Timeout counter used across states */
                            ^
Warning[Pe177]: variable "bleintegration_u32Timeout" was declared but never
          referenced

   \                                 In section .bss, align 4
     30          static uint8_t m_evt_buffer[100];      // TODO: Determine exact value             /* Single BLE buffer used for incoming BLE messages */
   \                     m_evt_buffer:
   \   00000000                      DS8 100
     31          
     32          /*--------------------------------------------------------------------------------------------------------------------*/
     33          /* Private Function Declarations.                                                                                                   */
     34          /*--------------------------------------------------------------------------------------------------------------------*/
     35          static ble_evt_t* BLEIntegration_get_buffer(void);
     36          
     37          /**********************************************************************************************************************
     38          Function Definitions
     39          **********************************************************************************************************************/
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          /* Public functions                                                                                                   */
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          /* Protected functions                                                                                                */
     46          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     47          bool BLEIntegrationInitialize(void)
     48          {
     49            return true;
   \                     BLEIntegrationInitialize: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     50          }
     51          
     52          /*----------------------------------------------------------------------------------------------------------------------
     53          Function: BLEIntegrationHandler
     54          
     55          Description:
     56          Checks if a BLE buffer is present for processing.
     57          
     58          Requires:
     59            - None
     60          
     61          Promises:
     62            - Dispatches event to the all BLE Handlers
     63          */

   \                                 In section .text, align 2, keep-with-next
     64          void BLEIntegrationHandler(void)
     65          {
   \                     BLEIntegrationHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     66              // Fetch message.
     67              ble_evt_t* ble_evt = BLEIntegration_get_buffer();
   \   00000002   0x.... 0x....      BL       BLEIntegration_get_buffer
   \   00000006   0x0004             MOVS     R4,R0
     68                
     69              // Check if message was successfully fetched.
     70              while (ble_evt)
   \                     ??BLEIntegrationHandler_0: (+1)
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD006             BEQ      ??BLEIntegrationHandler_1
     71              {
     72                // Dispatch to all BLE specific handlers.
     73                bleperipheralEventHandler(ble_evt);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       bleperipheralEventHandler
     74                
     75                // Check if another message is pending.
     76                ble_evt = BLEIntegration_get_buffer();
   \   00000012   0x.... 0x....      BL       BLEIntegration_get_buffer
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0xE7F6             B        ??BLEIntegrationHandler_0
     77              }
     78          }
   \                     ??BLEIntegrationHandler_1: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     79          
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          /* Private functions                                                                                                */
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          /*----------------------------------------------------------------------------------------------------------------------
     84          Function: BLEIntegration_get_buffer
     85          
     86          Description:
     87          Calls the BLE SoftDevice function to check if an appropriate message is available
     88          
     89          Requires:
     90            - None
     91          
     92          Promises:
     93            - Returns NULL if no ble_message is availble.
     94            - Copies the ble_message to m_evt_buffer if message is available and returns pointer to 
     95              the buffer.
     96          */

   \                                 In section .text, align 2, keep-with-next
     97          static ble_evt_t* BLEIntegration_get_buffer(void)
     98          {
   \                     BLEIntegration_get_buffer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     99             u16 evt_len = sizeof(m_evt_buffer);
   \   00000002   0x2064             MOVS     R0,#+100
   \   00000004   0x4669             MOV      R1,SP
   \   00000006   0x8008             STRH     R0,[R1, #+0]
    100             u32 err_code;
    101          
    102             err_code = sd_ble_evt_get(m_evt_buffer, &evt_len);
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x....             LDR      R0,??DataTable1
   \   0000000C   0xDF60             SVC      0x60
   \   0000000E   0x0001             MOVS     R1,R0
    103             if (err_code == NRF_ERROR_NOT_FOUND)
   \   00000010   0x2905             CMP      R1,#+5
   \   00000012   0xD101             BNE      ??BLEIntegration_get_buffer_0
    104             {
    105                
    106                return NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE004             B        ??BLEIntegration_get_buffer_1
    107             }
    108             else if (err_code != NRF_SUCCESS)
   \                     ??BLEIntegration_get_buffer_0: (+1)
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD001             BEQ      ??BLEIntegration_get_buffer_2
    109             {
    110               return NULL;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B        ??BLEIntegration_get_buffer_1
    111             }
    112          
    113             
    114             return (ble_evt_t*) m_evt_buffer;
   \                     ??BLEIntegration_get_buffer_2: (+1)
   \   00000020   0x....             LDR      R0,??DataTable1
   \                     ??BLEIntegration_get_buffer_1: (+1)
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
    115          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     m_evt_buffer
    116          /*--------------------------------------------------------------------------------------------------------------------*/
    117          /* End of File                                                                                                        */
    118          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BLEIntegrationHandler
         8   -> BLEIntegration_get_buffer
         8   -> bleperipheralEventHandler
       0   BLEIntegrationInitialize
       8   BLEIntegration_get_buffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      28  BLEIntegrationHandler
       4  BLEIntegrationInitialize
      36  BLEIntegration_get_buffer
       4  G_u32BLEIntegrationFlags
     100  m_evt_buffer

 
 104 bytes in section .bss
  72 bytes in section .text
 
  72 bytes of CODE memory
 104 bytes of DATA memory

Errors: none
Warnings: 1
