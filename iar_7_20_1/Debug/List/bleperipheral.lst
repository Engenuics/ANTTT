###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       28/Dec/2017  14:47:42
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\bleperipheral.c
#    Command line =  
#        -f C:\Users\Vipin\AppData\Local\Temp\EW8E9F.tmp
#        (C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\bleperipheral.c -D NRF51
#        -lC C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List -o
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\bsp\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\application\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -I C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\drivers\ -On -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List\bleperipheral.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj\bleperipheral.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\bleperipheral.c
      1          /**********************************************************************************************************************
      2          File: bleperipheral.c                                                                
      3          
      4          Description:
      5          This is a bleperipheral .c file new source code
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BLEPeripheralFlags;                 /* Global state flags */
   \                     G_u32BLEPeripheralFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          
     22          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     23          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     24          
     25          
     26          /***********************************************************************************************************************
     27          Global variable definitions with scope limited to this local application.
     28          Variable names shall start with "SocInt_" and be declared as static.
     29          ***********************************************************************************************************************/
     30          static u32 bleperipheral_u32Timeout;                      /* Timeout counter used across states */
                            ^
Warning[Pe177]: variable "bleperipheral_u32Timeout" was declared but never
          referenced

   \                                 In section .bss, align 4
     31          static ble_gap_adv_params_t             m_adv_params;                                /**< Parameters to be passed to the stack when starting advertising. */
   \                     m_adv_params:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     32          static ble_gap_sec_params_t             m_sec_params;                                /**< Security requirements for this application. */
   \                     m_sec_params:
   \   00000000                      DS8 8

   \                                 In section .data, align 2
     33          static uint16_t                         m_conn_handle = BLE_CONN_HANDLE_INVALID;     /**< Handle of the current connection. */
   \                     m_conn_handle:
   \   00000000   0xFFFF             DC16 65535
     34          
     35          
     36          /**********************************************************************************************************************
     37          Function Definitions
     38          **********************************************************************************************************************/
     39          /*--------------------------------------------------------------------------------------------------------------------*/
     40          /* Public functions                                                                                                   */
     41          /*--------------------------------------------------------------------------------------------------------------------*/
     42          
     43          /*--------------------------------------------------------------------------------------------------------------------*/
     44          /* Protected functions                                                                                                */
     45          /*--------------------------------------------------------------------------------------------------------------------*/
     46          /*----------------------------------------------------------------------------------------------------------------------
     47          Function: bleperipheralInitialize
     48          
     49          Description:
     50          Initializes the GAP and GATT layers services for the system. Starts the GAP Advertising.
     51          
     52          Requires:
     53            - None
     54          
     55          Promises:
     56            - Returns TRUE if all sub-systems are successfully activated.
     57            - Returns FALSE if a sub-system failed and was not activated successfully.
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          bool bleperipheralInitialize(void)
     60          {
   \                     bleperipheralInitialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     61            bool result = false;
   \   00000002   0x2400             MOVS     R4,#+0
     62          
     63            // Set up all the base services for the peripheral mode.
     64            result |= bleperipheral_gap_params_init();
   \   00000004   0xB2E4             UXTB     R4,R4
   \   00000006   0x.... 0x....      BL       bleperipheral_gap_params_init
   \   0000000A   0x4320             ORRS     R0,R0,R4
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ      ??bleperipheralInitialize_0
   \   00000010   0x2401             MOVS     R4,#+1
   \   00000012   0xE000             B        ??bleperipheralInitialize_1
   \                     ??bleperipheralInitialize_0: (+1)
   \   00000014   0x2400             MOVS     R4,#+0
     65            result |= bleperipheral_advertising_init();
   \                     ??bleperipheralInitialize_1: (+1)
   \   00000016   0xB2E4             UXTB     R4,R4
   \   00000018   0x.... 0x....      BL       bleperipheral_advertising_init
   \   0000001C   0x4320             ORRS     R0,R0,R4
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD001             BEQ      ??bleperipheralInitialize_2
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xE000             B        ??bleperipheralInitialize_3
   \                     ??bleperipheralInitialize_2: (+1)
   \   00000026   0x2400             MOVS     R4,#+0
     66            result |= bleperipheral_services_init();
   \                     ??bleperipheralInitialize_3: (+1)
   \   00000028   0xB2E4             UXTB     R4,R4
   \   0000002A   0x.... 0x....      BL       bleperipheral_services_init
   \   0000002E   0x4320             ORRS     R0,R0,R4
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD001             BEQ      ??bleperipheralInitialize_4
   \   00000034   0x2401             MOVS     R4,#+1
   \   00000036   0xE000             B        ??bleperipheralInitialize_5
   \                     ??bleperipheralInitialize_4: (+1)
   \   00000038   0x2400             MOVS     R4,#+0
     67            bleperipheral_sec_params_init();
   \                     ??bleperipheralInitialize_5: (+1)
   \   0000003A   0x.... 0x....      BL       bleperipheral_sec_params_init
     68            result |= bleperipheral_advertising_start();
   \   0000003E   0xB2E4             UXTB     R4,R4
   \   00000040   0x.... 0x....      BL       bleperipheral_advertising_start
   \   00000044   0x4320             ORRS     R0,R0,R4
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD001             BEQ      ??bleperipheralInitialize_6
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xE000             B        ??bleperipheralInitialize_7
   \                     ??bleperipheralInitialize_6: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
     69            
     70            return result;
   \                     ??bleperipheralInitialize_7: (+1)
   \   00000050   0xB2C0             UXTB     R0,R0
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
     71          }
     72          
     73          
     74          /*----------------------------------------------------------------------------------------------------------------------
     75          Function: blePeripheralEventHandler(ble_evt*)
     76          
     77          Description:
     78          The Event handler which handles the various GATT and GAP events received from the SoftDevice once BLE Services have been activated.
     79          
     80          Requires:
     81            - ble_evt_t*: Pointer to the single buffer holding the current ble_evt_t from the SoftDevice.
     82          
     83          Promises:
     84            - Decodes the ble_evt_t and handles message accordingly.
     85            - Returns TRUE if ble_evt_t decoded and action taken.
     86            - Returns FALSE if ble_evt_t decoded and action failed.
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          bool bleperipheralEventHandler(ble_evt_t* p_ble_evt)
     89          {
   \                     bleperipheralEventHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
     90              u32 err_code = NRF_SUCCESS;
   \   00000004   0x2400             MOVS     R4,#+0
     91              
     92              switch (p_ble_evt->header.evt_id)
   \   00000006   0x8828             LDRH     R0,[R5, #+0]
   \   00000008   0x2810             CMP      R0,#+16
   \   0000000A   0xD00A             BEQ      ??bleperipheralEventHandler_0
   \   0000000C   0x2811             CMP      R0,#+17
   \   0000000E   0xD00F             BEQ      ??bleperipheralEventHandler_1
   \   00000010   0x2813             CMP      R0,#+19
   \   00000012   0xD015             BEQ      ??bleperipheralEventHandler_2
   \   00000014   0x2819             CMP      R0,#+25
   \   00000016   0xD01A             BEQ      ??bleperipheralEventHandler_3
   \   00000018   0x2850             CMP      R0,#+80
   \   0000001A   0xD020             BEQ      ??bleperipheralEventHandler_4
   \   0000001C   0x2852             CMP      R0,#+82
   \   0000001E   0xD017             BEQ      ??bleperipheralEventHandler_5
   \   00000020   0xE021             B        ??bleperipheralEventHandler_6
     93              {
     94                  case BLE_GAP_EVT_CONNECTED:
     95                      m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   \                     ??bleperipheralEventHandler_0: (+1)
   \   00000022   0x88A8             LDRH     R0,[R5, #+4]
   \   00000024   0x....             LDR      R1,??DataTable6
   \   00000026   0x8008             STRH     R0,[R1, #+0]
     96                      BPEngenuicsOnConnect(p_ble_evt);
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       BPEngenuicsOnConnect
     97                      break;
   \   0000002E   0xE01A             B        ??bleperipheralEventHandler_7
     98          
     99                  case BLE_GAP_EVT_DISCONNECTED:
    100                      m_conn_handle = BLE_CONN_HANDLE_INVALID;
   \                     ??bleperipheralEventHandler_1: (+1)
   \   00000030   0x....             LDR      R0,??DataTable6_1  ;; 0xffff
   \   00000032   0x....             LDR      R1,??DataTable6
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    101                      BPEngenuicsOnDisconnect();
   \   00000036   0x.... 0x....      BL       BPEngenuicsOnDisconnect
    102                      bleperipheral_advertising_start();
   \   0000003A   0x.... 0x....      BL       bleperipheral_advertising_start
    103                      break;
   \   0000003E   0xE012             B        ??bleperipheralEventHandler_7
    104          
    105                  case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
    106                      err_code = sd_ble_gap_sec_params_reply(m_conn_handle,
    107                                                             BLE_GAP_SEC_STATUS_SUCCESS,
    108                                                             &m_sec_params);
   \                     ??bleperipheralEventHandler_2: (+1)
   \   00000040   0x....             LDR      R2,??DataTable6_2
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR      R0,??DataTable6
   \   00000046   0x8800             LDRH     R0,[R0, #+0]
   \   00000048   0xDF7F             SVC      0x7F
   \   0000004A   0x0004             MOVS     R4,R0
    109                      break;
   \   0000004C   0xE00B             B        ??bleperipheralEventHandler_7
    110          
    111                  case BLE_GAP_EVT_TIMEOUT:
    112                      break;
   \                     ??bleperipheralEventHandler_3: (+1)
   \   0000004E   0xE00A             B        ??bleperipheralEventHandler_7
    113          
    114                  case BLE_GATTS_EVT_SYS_ATTR_MISSING:
    115                      err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0);
   \                     ??bleperipheralEventHandler_5: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x....             LDR      R0,??DataTable6
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0xDFA9             SVC      0xA9
   \   0000005A   0x0004             MOVS     R4,R0
    116                      break;
   \   0000005C   0xE003             B        ??bleperipheralEventHandler_7
    117                      
    118                  case BLE_GATTS_EVT_WRITE:
    119                    BPEngenuicsOnWrite(p_ble_evt);
   \                     ??bleperipheralEventHandler_4: (+1)
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       BPEngenuicsOnWrite
    120                    break;
   \   00000064   0xE7FF             B        ??bleperipheralEventHandler_7
    121          
    122                  default:
    123                      // No implementation needed.
    124                      break;
    125              }
    126          
    127              return err_code == NRF_SUCCESS;
   \                     ??bleperipheralEventHandler_6: (+1)
   \                     ??bleperipheralEventHandler_7: (+1)
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD101             BNE      ??bleperipheralEventHandler_8
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE000             B        ??bleperipheralEventHandler_9
   \                     ??bleperipheralEventHandler_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??bleperipheralEventHandler_9: (+1)
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          bool bleperipheralIsConnectedandEnabled(void)
    131          {
   \                     bleperipheralIsConnectedandEnabled: (+1)
   \   00000000   0xB500             PUSH     {LR}
    132             // Check if connected and service enabled on BLE.
    133             return (m_conn_handle != BLE_CONN_HANDLE_INVALID);
   \   00000002   0x....             LDR      R0,??DataTable6
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable6_1  ;; 0xffff
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD001             BEQ      ??bleperipheralIsConnectedandEnabled_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B        ??bleperipheralIsConnectedandEnabled_1
   \                     ??bleperipheralIsConnectedandEnabled_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??bleperipheralIsConnectedandEnabled_1: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD00             POP      {PC}             ;; return
    134          }
    135          
    136          
    137          /*--------------------------------------------------------------------------------------------------------------------*/
    138          /* Private functions                                                                                                */
    139          /*--------------------------------------------------------------------------------------------------------------------*/
    140          /*----------------------------------------------------------------------------------------------------------------------
    141          Function: bleperipheral_gap_params_init
    142          
    143          Description:
    144          Initializes the GAP parameters for the device. Sets the device name, sets the device apperance type and defines the peripheral 
    145          requested rates.
    146          
    147          Requires:
    148            - None
    149          
    150          Promises:
    151            - Returns TRUE if GAP params are successfully completed.
    152            - Returns FALSE if GAP params are not set successfully.
    153          */

   \                                 In section .text, align 2, keep-with-next
    154          static bool bleperipheral_gap_params_init(void)
    155          {
   \                     bleperipheral_gap_params_init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    156              u32 err_code = NRF_SUCCESS;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    157              ble_gap_conn_params_t   gap_conn_params;
    158              ble_gap_conn_sec_mode_t sec_mode;
    159          
    160              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000014   0x0F00             LSRS     R0,R0,#+28
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7001             STRB     R1,[R0, #+0]
    161          
    162              err_code |= sd_ble_gap_device_name_set(&sec_mode, DEVICE_NAME, strlen(DEVICE_NAME));
   \   0000001E   0x9B01             LDR      R3,[SP, #+4]
   \   00000020   0x2205             MOVS     R2,#+5
   \   00000022   0x....             LDR      R1,??DataTable6_3
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0xDF7C             SVC      0x7C
   \   00000028   0x4318             ORRS     R0,R0,R3
   \   0000002A   0x9001             STR      R0,[SP, #+4]
    163              err_code |= sd_ble_gap_appearance_set(BLEPERIPHERAL_DEVICE_APPEARANCE);
   \   0000002C   0x9901             LDR      R1,[SP, #+4]
   \   0000002E   0x20F1             MOVS     R0,#+241
   \   00000030   0x0080             LSLS     R0,R0,#+2        ;; #+964
   \   00000032   0xDF78             SVC      0x78
   \   00000034   0x0004             MOVS     R4,R0
   \   00000036   0x430C             ORRS     R4,R4,R1
    164          
    165              memset(&gap_conn_params, 0, sizeof(gap_conn_params));
   \   00000038   0x2508             MOVS     R5,#+8
   \   0000003A   0x2600             MOVS     R6,#+0
   \   0000003C   0xAF02             ADD      R7,SP,#+8
   \   0000003E   0x0032             MOVS     R2,R6
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x.... 0x....      BL       __aeabi_memset
    166              gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
   \   00000048   0x20C8             MOVS     R0,#+200
   \   0000004A   0x0040             LSLS     R0,R0,#+1        ;; #+400
   \   0000004C   0x4669             MOV      R1,SP
   \   0000004E   0x8108             STRH     R0,[R1, #+8]
    167              gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
   \   00000050   0x20C8             MOVS     R0,#+200
   \   00000052   0x0080             LSLS     R0,R0,#+2        ;; #+800
   \   00000054   0xA902             ADD      R1,SP,#+8
   \   00000056   0x8048             STRH     R0,[R1, #+2]
    168              gap_conn_params.slave_latency     = SLAVE_LATENCY;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0x8088             STRH     R0,[R1, #+4]
    169              gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
   \   0000005E   0x20C8             MOVS     R0,#+200
   \   00000060   0x0040             LSLS     R0,R0,#+1        ;; #+400
   \   00000062   0xA902             ADD      R1,SP,#+8
   \   00000064   0x80C8             STRH     R0,[R1, #+6]
    170          
    171              err_code |= sd_ble_gap_ppcp_set(&gap_conn_params);
   \   00000066   0xA802             ADD      R0,SP,#+8
   \   00000068   0xDF7A             SVC      0x7A
   \   0000006A   0x4320             ORRS     R0,R0,R4
    172              
    173              return err_code == NRF_SUCCESS;
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD101             BNE      ??bleperipheral_gap_params_init_0
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE000             B        ??bleperipheral_gap_params_init_1
   \                     ??bleperipheral_gap_params_init_0: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_gap_params_init_1: (+1)
   \   00000076   0xB2C0             UXTB     R0,R0
   \   00000078   0xB005             ADD      SP,SP,#+20
   \   0000007A   0xBDF0             POP      {R4-R7,PC}       ;; return
    174          }
    175          
    176          /*----------------------------------------------------------------------------------------------------------------------
    177          Function: bleperipheral_advertising_init
    178          
    179          Description:
    180          Initializes the GAP parameters for the device. Sets the device name, sets the device apperance type and defines the peripheral 
    181          requested rates.
    182          
    183          Requires:
    184            - None
    185          
    186          Promises:
    187            - Returns TRUE if GAP params are successfully completed.
    188            - Returns FALSE if GAP params are not set successfully.
    189          */

   \                                 In section .text, align 2, keep-with-next
    190          static bool bleperipheral_advertising_init(void)
    191          {
   \                     bleperipheral_advertising_init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    192              u32 err_code = NRF_SUCCESS;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    193              ble_advdata_t advdata;
    194              u8 flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   \   00000008   0x2006             MOVS     R0,#+6
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    195          
    196              ble_uuid_t adv_uuids[] =
    197              {
    198                  {BLE_UUID_HEART_RATE_SERVICE,         BLE_UUID_TYPE_BLE},
    199                  {BLE_UUID_DEVICE_INFORMATION_SERVICE, BLE_UUID_TYPE_BLE}
    200              };
   \   0000000E   0xA804             ADD      R0,SP,#+16
   \   00000010   0x....             LDR      R1,??DataTable6_4
   \   00000012   0xC90C             LDM      R1!,{R2,R3}
   \   00000014   0xC00C             STM      R0!,{R2,R3}
   \   00000016   0x3908             SUBS     R1,R1,#+8
   \   00000018   0x3808             SUBS     R0,R0,#+8
    201          
    202              // Build and set advertising data
    203              memset(&advdata, 0, sizeof(advdata));
   \   0000001A   0x2038             MOVS     R0,#+56
   \   0000001C   0x9003             STR      R0,[SP, #+12]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9002             STR      R0,[SP, #+8]
   \   00000022   0xAC06             ADD      R4,SP,#+24
   \   00000024   0x9A02             LDR      R2,[SP, #+8]
   \   00000026   0x9903             LDR      R1,[SP, #+12]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       __aeabi_memset
    204          
    205              advdata.name_type               = BLE_ADVDATA_FULL_NAME;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x7608             STRB     R0,[R1, #+24]
    206              advdata.include_appearance      = true;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xA906             ADD      R1,SP,#+24
   \   00000038   0x7088             STRB     R0,[R1, #+2]
    207              advdata.flags.size              = sizeof(flags);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xA906             ADD      R1,SP,#+24
   \   0000003E   0x8088             STRH     R0,[R1, #+4]
    208              advdata.flags.p_data            = &flags;
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x9008             STR      R0,[SP, #+32]
    209              advdata.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xA906             ADD      R1,SP,#+24
   \   00000048   0x8308             STRH     R0,[R1, #+24]
    210              advdata.uuids_complete.p_uuids  = adv_uuids;
   \   0000004A   0xA804             ADD      R0,SP,#+16
   \   0000004C   0x900D             STR      R0,[SP, #+52]
    211          
    212              err_code |= ble_advdata_set(&advdata, NULL);
   \   0000004E   0x9C01             LDR      R4,[SP, #+4]
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xA806             ADD      R0,SP,#+24
   \   00000054   0x.... 0x....      BL       ble_advdata_set
   \   00000058   0x4320             ORRS     R0,R0,R4
   \   0000005A   0x0004             MOVS     R4,R0
    213          
    214              // Initialise advertising parameters (used when starting advertising)
    215              memset(&m_adv_params, 0, sizeof(m_adv_params));
   \   0000005C   0x2514             MOVS     R5,#+20
   \   0000005E   0x2600             MOVS     R6,#+0
   \   00000060   0x....             LDR      R7,??DataTable6_5
   \   00000062   0x0032             MOVS     R2,R6
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0x0038             MOVS     R0,R7
   \   00000068   0x.... 0x....      BL       __aeabi_memset
    216          
    217              m_adv_params.type        = BLE_GAP_ADV_TYPE_ADV_IND;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x....             LDR      R1,??DataTable6_5
   \   00000070   0x7008             STRB     R0,[R1, #+0]
    218              m_adv_params.p_peer_addr = NULL;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR      R1,??DataTable6_5
   \   00000076   0x6048             STR      R0,[R1, #+4]
    219              m_adv_params.fp          = BLE_GAP_ADV_FP_ANY;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x....             LDR      R1,??DataTable6_5
   \   0000007C   0x7208             STRB     R0,[R1, #+8]
    220              m_adv_params.interval    = APP_ADV_INTERVAL;
   \   0000007E   0x2028             MOVS     R0,#+40
   \   00000080   0x....             LDR      R1,??DataTable6_5
   \   00000082   0x8208             STRH     R0,[R1, #+16]
    221              m_adv_params.timeout     = APP_ADV_TIMEOUT_IN_SECONDS;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR      R1,??DataTable6_5
   \   00000088   0x8248             STRH     R0,[R1, #+18]
    222              
    223              return err_code == NRF_SUCCESS;
   \   0000008A   0x2C00             CMP      R4,#+0
   \   0000008C   0xD101             BNE      ??bleperipheral_advertising_init_0
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xE000             B        ??bleperipheral_advertising_init_1
   \                     ??bleperipheral_advertising_init_0: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_advertising_init_1: (+1)
   \   00000094   0xB2C0             UXTB     R0,R0
   \   00000096   0xB015             ADD      SP,SP,#+84
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
    224          }
    225          
    226          /*----------------------------------------------------------------------------------------------------------------------
    227          Function: bleperipheral_advertising_init
    228          
    229          Description:
    230          Initializes any BLE Peripheral Services.
    231          
    232          Requires:
    233            - None
    234          
    235          Promises:
    236            - Returns TRUE if service initialization successful.
    237            - Returns FALSE if service initialization fails.
    238          */

   \                                 In section .text, align 2, keep-with-next
    239          static bool bleperipheral_services_init(void)
    240          {
   \                     bleperipheral_services_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    241            // Initialize the BPEngenuics service.
    242            if (!BPEngenuicsInitialize())
   \   00000002   0x.... 0x....      BL       BPEngenuicsInitialize
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE      ??bleperipheral_services_init_0
    243              return false;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE000             B        ??bleperipheral_services_init_1
    244            
    245            return true;
   \                     ??bleperipheral_services_init_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \                     ??bleperipheral_services_init_1: (+1)
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    246          }
    247          
    248          
    249          /*----------------------------------------------------------------------------------------------------------------------
    250          Function: bleperipheral_advertising_start
    251          
    252          Description:
    253          Start Advertising
    254          
    255          Requires:
    256            - None
    257          
    258          Promises:
    259            - Returns TRUE if advertising start successful.
    260            - Returns FALSE if advertising start fails.
    261          */

   \                                 In section .text, align 2, keep-with-next
    262          static bool bleperipheral_advertising_start(void)
    263          {
   \                     bleperipheral_advertising_start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    264              u32 err_code;
    265          
    266              err_code = sd_ble_gap_adv_start(&m_adv_params);
   \   00000002   0x....             LDR      R0,??DataTable6_5
   \   00000004   0xDF73             SVC      0x73
    267              return err_code == NRF_SUCCESS;
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE      ??bleperipheral_advertising_start_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE000             B        ??bleperipheral_advertising_start_1
   \                     ??bleperipheral_advertising_start_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_advertising_start_1: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    268          }
    269          
    270          
    271          /*----------------------------------------------------------------------------------------------------------------------
    272          Function: bleperipheral_sec_params_init
    273          
    274          Description:
    275          Initializes security parameteres.
    276          
    277          Requires:
    278            - None
    279          
    280          Promises:
    281            - None
    282          */

   \                                 In section .text, align 2, keep-with-next
    283          static void bleperipheral_sec_params_init(void)
    284          {
    285              m_sec_params.timeout      = SEC_PARAM_TIMEOUT;
   \                     bleperipheral_sec_params_init: (+1)
   \   00000000   0x201E             MOVS     R0,#+30
   \   00000002   0x....             LDR      R1,??DataTable6_2
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    286              m_sec_params.bond         = SEC_PARAM_BOND;
   \   00000006   0x....             LDR      R0,??DataTable6_2
   \   00000008   0x7880             LDRB     R0,[R0, #+2]
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4301             ORRS     R1,R1,R0
   \   0000000E   0x....             LDR      R0,??DataTable6_2
   \   00000010   0x7081             STRB     R1,[R0, #+2]
    287              m_sec_params.mitm         = SEC_PARAM_MITM;
   \   00000012   0x....             LDR      R0,??DataTable6_2
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x21FD             MOVS     R1,#+253
   \   00000018   0x4001             ANDS     R1,R1,R0
   \   0000001A   0x....             LDR      R0,??DataTable6_2
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    288              m_sec_params.io_caps      = SEC_PARAM_IO_CAPABILITIES;
   \   0000001E   0x....             LDR      R0,??DataTable6_2
   \   00000020   0x7880             LDRB     R0,[R0, #+2]
   \   00000022   0x21E3             MOVS     R1,#+227
   \   00000024   0x4001             ANDS     R1,R1,R0
   \   00000026   0x200C             MOVS     R0,#+12
   \   00000028   0x4308             ORRS     R0,R0,R1
   \   0000002A   0x....             LDR      R1,??DataTable6_2
   \   0000002C   0x7088             STRB     R0,[R1, #+2]
    289              m_sec_params.oob          = SEC_PARAM_OOB;
   \   0000002E   0x....             LDR      R0,??DataTable6_2
   \   00000030   0x7880             LDRB     R0,[R0, #+2]
   \   00000032   0x21DF             MOVS     R1,#+223
   \   00000034   0x4001             ANDS     R1,R1,R0
   \   00000036   0x....             LDR      R0,??DataTable6_2
   \   00000038   0x7081             STRB     R1,[R0, #+2]
    290              m_sec_params.min_key_size = SEC_PARAM_MIN_KEY_SIZE;
   \   0000003A   0x2007             MOVS     R0,#+7
   \   0000003C   0x....             LDR      R1,??DataTable6_2
   \   0000003E   0x70C8             STRB     R0,[R1, #+3]
    291              m_sec_params.max_key_size = SEC_PARAM_MAX_KEY_SIZE;
   \   00000040   0x2010             MOVS     R0,#+16
   \   00000042   0x....             LDR      R1,??DataTable6_2
   \   00000044   0x7108             STRB     R0,[R1, #+4]
    292          }
   \   00000046   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     m_sec_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     m_adv_params

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x4C          DC8 "BLETT"
   \              0x45 0x54    
   \              0x54 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x180D             DC16 6157
   \   00000002   0x01 0x00          DC8 1, 0
   \   00000004   0x180A             DC16 6154
   \   00000006   0x01 0x00          DC8 1, 0
    293          
    294          /*--------------------------------------------------------------------------------------------------------------------*/
    295          /* End of File                                                                                                        */
    296          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   bleperipheralEventHandler
        16   -> BPEngenuicsOnConnect
        16   -> BPEngenuicsOnDisconnect
        16   -> BPEngenuicsOnWrite
        16   -> bleperipheral_advertising_start
       8   bleperipheralInitialize
         8   -> bleperipheral_advertising_init
         8   -> bleperipheral_advertising_start
         8   -> bleperipheral_gap_params_init
         8   -> bleperipheral_sec_params_init
         8   -> bleperipheral_services_init
       4   bleperipheralIsConnectedandEnabled
     104   bleperipheral_advertising_init
       104   -> __aeabi_memset
       104   -> ble_advdata_set
       8   bleperipheral_advertising_start
      40   bleperipheral_gap_params_init
        40   -> __aeabi_memset
       0   bleperipheral_sec_params_init
       8   bleperipheral_services_init
         8   -> BPEngenuicsInitialize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       8  ?_0
       8  ?_1
       4  G_u32BLEPeripheralFlags
     116  bleperipheralEventHandler
      84  bleperipheralInitialize
      22  bleperipheralIsConnectedandEnabled
     154  bleperipheral_advertising_init
      20  bleperipheral_advertising_start
     124  bleperipheral_gap_params_init
      72  bleperipheral_sec_params_init
      18  bleperipheral_services_init
      20  m_adv_params
       2  m_conn_handle
       8  m_sec_params

 
  32 bytes in section .bss
   2 bytes in section .data
  16 bytes in section .rodata
 634 bytes in section .text
 
 634 bytes of CODE  memory
  16 bytes of CONST memory
  34 bytes of DATA  memory

Errors: none
Warnings: 1
