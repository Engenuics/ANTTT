###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       26/Dec/2017  14:53:04
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\leds_anttt.c
#    Command line =  
#        -f C:\Users\Vipin\AppData\Local\Temp\EWCDDC.tmp
#        (C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\leds_anttt.c -D NRF51 -lC
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List -o
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\bsp\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\application\ -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -I C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\..\drivers\ -On -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\List\leds_anttt.lst
#    Object file  =  
#        C:\Users\Vipin\Documents\GitHub\ANTTT\iar_7_20_1\Debug\Obj\leds_anttt.o
#
###############################################################################

C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\leds_anttt.c
      1          /***********************************************************************************************************************
      2          File: leds_nRF51.c                                                                
      3          
      4          Description:
      5          LED driver that provides on, off, toggle, blink and PWM functionality.
      6          The basic on/off/toggle functionality is applied directly to the LEDs.
      7          Blinking and PWMing of LEDs rely on a 1ms system tick to provide timing at
      8          regular 1ms calls to LedUpdate().
      9          
     10          ------------------------------------------------------------------------------------------------------------------------
     11          API:
     12          LedNumberType: BLUE, GREEN, YELLOW, RED
     13          
     14          LedRateType: LED_0_5HZ, LED_1HZ, LED_2HZ, LED_4HZ, LED_8HZ, 
     15                       LED_PWM_0, LED_PWM_5, ..., LED_PWM_100
     16          *Note that PWM values in LedRateType are continuous, thus stepping a variable of LedRateType by one will select the next 
     17          PWM level. However, decrementing past LED_PWM_0 or incrementing past LED_PWM_100 is undefined.
     18          
     19          
     20          Public:
     21          void LedOn(LedNumberType eLED_)
     22          Turn the specified LED on. LED response is immediate.
     23          e.g. LedOn(BLUE);
     24          
     25          void LedOff(LedNumberType eLED_)
     26          Turn the specified LED off. LED response is immediate.
     27          e.g. LedOff(BLUE);
     28          
     29          void LedToggle(LedNumberType eLED_)
     30          Toggle the specified LED.  LED response is immediate.
     31          e.g. LedToggle(BLUE);
     32          
     33          void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_)
     34          Sets up an LED for PWM mode.  PWM mode requries the main loop to be running at 1ms period.
     35          e.g. LedPWM(BLUE, LED_PWM_5);
     36          
     37          void LedBlink(LedNumberType eLED_, LedRateType eBlinkRate_)
     38          Sets an LED to BLINK mode.  BLINK mode requries the main loop to be running at 1ms period.
     39          e.g. LedBlink(BLUE, LED_1HZ);
     40          
     41          Protected:
     42          void LedInitialize(void)
     43          Test all LEDs and initialize to OFF state.
     44          
     45          DISCLAIMER: THIS CODE IS PROVIDED WITHOUT ANY WARRANTY OR GUARANTEES.  USERS MAY
     46          USE THIS CODE FOR DEVELOPMENT AND EXAMPLE PURPOSES ONLY.  ENGENUICS TECHNOLOGIES
     47          INCORPORATED IS NOT RESPONSIBLE FOR ANY ERRORS, OMISSIONS, OR DAMAGES THAT COULD
     48          RESULT FROM USING THIS FIRMWARE IN WHOLE OR IN PART.
     49          ***********************************************************************************************************************/
     50          
     51          #include "configuration.h"
     52          
     53          
     54          /***********************************************************************************************************************
     55          Global variable definitions with scope across entire project.
     56          All Global variable names shall start with "G_xxLed"
     57          ***********************************************************************************************************************/
     58          /*--------------------------------------------------------------------------------------------------------------------*/
     59          /* New variables (all shall start with G_xxLed*/
     60          
     61          
     62          /*--------------------------------------------------------------------------------------------------------------------*/
     63          /* External global variables defined in other files (must indicate which file they are defined in) */
     64          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     65          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     66          
     67          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     68          
     69          
     70          /***********************************************************************************************************************
     71          Global variable definitions with scope limited to this local application.
     72          Variable names shall start with "Led_" and be declared as static.
     73          ***********************************************************************************************************************/
     74          /* LED locations: order must correspond to the order set in LedNumberType in the header file. */

   \                                 In section .data, align 4
     75          static u32 Led_au32BitPositions[] = {P0_20_LED_HOME_1, P0_17_LED_HOME_2, P0_30_LED_HOME_3, P0_12_LED_HOME_4, P0_06_LED_HOME_5, 
   \                     Led_au32BitPositions:
   \   00000000   0x00100000         DC32 1048576, 131072, 1073741824, 4096, 64, 536870912, 1024, 2, 4194304
   \              0x00020000   
   \              0x40000000   
   \              0x00001000   
   \              0x00000040   
   \              0x20000000   
   \              0x00000400   
   \              0x00000002   
   \              0x00400000   
   \   00000024   0x00080000         DC32 524288, 262144, 268435456, 8192, 128, 2097152, 2048, 4, 16777216
   \              0x00040000   
   \              0x10000000   
   \              0x00002000   
   \              0x00000080   
   \              0x00200000   
   \              0x00000800   
   \              0x00000004   
   \              0x01000000   
   \   00000048   0x00000020         DC32 32, 16, 8
   \              0x00000010   
   \              0x00000008   
     76                                               P0_29_LED_HOME_6, P0_10_LED_HOME_7, P0_01_LED_HOME_8, P0_22_LED_HOME_9, 
     77                                               P0_19_LED_AWAY_1, P0_18_LED_AWAY_2, P0_28_LED_AWAY_3, P0_13_LED_AWAY_4, P0_07_LED_AWAY_5, 
     78                                               P0_21_LED_AWAY_6, P0_11_LED_AWAY_7, P0_02_LED_AWAY_8, P0_24_LED_AWAY_9,
     79                                               P0_05_LED_STATUS_RED, P0_04_LED_STATUS_YLW, P0_03_LED_STATUS_GRN};
     80          
     81          /* Control array for all LEDs in system initialized for LedInitialize().  Array values correspond to LedConfigType fields: 
     82               eMode         eRate      u16Count       eCurrentDuty     eActiveState     ePort      LedNumberType */

   \                                 In section .data, align 4
     83          static LedConfigType Leds_asLedArray[TOTAL_LEDS] = 
   \                     Leds_asLedArray:
   \   00000000   0x00 0x00          DC8 0, 0
   \   00000002   0x0014 0x0014      DC16 20, 20
   \   00000006   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000000A   0x0014 0x0014      DC16 20, 20
   \   0000000E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000012   0x0014 0x0014      DC16 20, 20
   \   00000016   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000001A   0x0014 0x0014      DC16 20, 20
   \   0000001E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000022   0x0014 0x0014      DC16 20, 20
   \   00000026   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000002A   0x0014 0x0014      DC16 20, 20
   \   0000002E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000032   0x0014 0x0014      DC16 20, 20
   \   00000036   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000003A   0x0014 0x0014      DC16 20, 20
   \   0000003E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000042   0x0014 0x0014      DC16 20, 20
   \   00000046   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000004A   0x0014 0x0014      DC16 20, 20
   \   0000004E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000052   0x0014 0x0014      DC16 20, 20
   \   00000056   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000005A   0x0014 0x0014      DC16 20, 20
   \   0000005E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000062   0x0014 0x0014      DC16 20, 20
   \   00000066   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000006A   0x0014 0x0014      DC16 20, 20
   \   0000006E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000072   0x0014 0x0014      DC16 20, 20
   \   00000076   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000007A   0x0014 0x0014      DC16 20, 20
   \   0000007E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000082   0x0014 0x0014      DC16 20, 20
   \   00000086   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000008A   0x0014 0x0014      DC16 20, 20
   \   0000008E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000092   0x0014 0x0014      DC16 20, 20
   \   00000096   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000009A   0x0014 0x0014      DC16 20, 20
   \   0000009E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   000000A2   0x0014 0x0014      DC16 20, 20
   \   000000A6   0x01 0x01          DC8 1, 1
     84          {
     85           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     86           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     87           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     88           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     89           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     90           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     91           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     92           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     93           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     94           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     95           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     96           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     97           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     98           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     99           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
    100           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
    101           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
    102           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
    103           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
    104           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
    105           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
    106          };   
    107           
    108          
    109          /***********************************************************************************************************************
    110          * Function Definitions
    111          ***********************************************************************************************************************/
    112          
    113          /*--------------------------------------------------------------------------------------------------------------------*/
    114          /* Public functions */
    115          /*--------------------------------------------------------------------------------------------------------------------*/
    116          
    117          /*----------------------------------------------------------------------------------------------------------------------
    118          Function: LedOn
    119          
    120          Description:
    121          Turn the specified LED on.  Automatically takes care of the active low vs. active
    122          high LEDs.  
    123          
    124          Requires:
    125            - eLED_ is a valid LED index
    126            - Definitions in Leds_asLedArray[eLED_] are correct
    127            - Supports port 0 GPIO only
    128          
    129          Promises:
    130            - Requested LED is turned on 
    131            - Requested LED is always set to LED_NORMAL_MODE mode
    132          */

   \                                 In section .text, align 2, keep-with-next
    133          void LedOn(LedNumberType eLED_)
    134          {
   \                     LedOn: (+1)
   \   00000000   0xB500             PUSH     {LR}
    135          
    136            if(Leds_asLedArray[eLED_].eActiveState == LED_ACTIVE_HIGH)
   \   00000002   0x....             LDR      R1,??DataTable6
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x4342             MULS     R2,R0,R2
   \   0000000A   0x1889             ADDS     R1,R1,R2
   \   0000000C   0x79C9             LDRB     R1,[R1, #+7]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD107             BNE      ??LedOn_0
    137            {
    138              NRF_GPIO->OUTSET = Led_au32BitPositions[eLED_];
   \   00000012   0x....             LDR      R1,??DataTable6_1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0x4342             MULS     R2,R0,R2
   \   0000001A   0x5889             LDR      R1,[R1, R2]
   \   0000001C   0x....             LDR      R2,??DataTable6_2  ;; 0x50000508
   \   0000001E   0x6011             STR      R1,[R2, #+0]
   \   00000020   0xE006             B        ??LedOn_1
    139            }
    140            else
    141            {
    142              NRF_GPIO->OUTCLR = Led_au32BitPositions[eLED_];
   \                     ??LedOn_0: (+1)
   \   00000022   0x....             LDR      R1,??DataTable6_1
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x4342             MULS     R2,R0,R2
   \   0000002A   0x5889             LDR      R1,[R1, R2]
   \   0000002C   0x....             LDR      R2,??DataTable6_3  ;; 0x5000050c
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    143            }
    144            
    145            /* Always set the LED back to LED_NORMAL_MODE mode */
    146          	Leds_asLedArray[(u8)eLED_].eMode = LED_NORMAL_MODE;
   \                     ??LedOn_1: (+1)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable6
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x2308             MOVS     R3,#+8
   \   00000038   0x4343             MULS     R3,R0,R3
   \   0000003A   0x54D1             STRB     R1,[R2, R3]
    147          
    148          } /* end LedOn() */
   \   0000003C   0xBD00             POP      {PC}             ;; return
    149          
    150          
    151          /*----------------------------------------------------------------------------------------------------------------------
    152          Function: LedOff
    153          
    154          Description:
    155          Turn the specified LED off.  Automatically takes care of the active low vs. active
    156          high LEDs.  
    157          
    158          Requires:
    159            - eLED_ is a valid LED index
    160            - Definitions in Leds_asLedArray[eLED_] are correct
    161          
    162          Promises:
    163            - Requested LED is turned off
    164            - Requested LED is always set to LED_NORMAL_MODE mode
    165          */

   \                                 In section .text, align 2, keep-with-next
    166          void LedOff(LedNumberType eLED_)
    167          {
   \                     LedOff: (+1)
   \   00000000   0xB500             PUSH     {LR}
    168            if(Leds_asLedArray[eLED_].eActiveState == LED_ACTIVE_HIGH)
   \   00000002   0x....             LDR      R1,??DataTable6
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x4342             MULS     R2,R0,R2
   \   0000000A   0x1889             ADDS     R1,R1,R2
   \   0000000C   0x79C9             LDRB     R1,[R1, #+7]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD107             BNE      ??LedOff_0
    169            {
    170              NRF_GPIO->OUTCLR = Led_au32BitPositions[eLED_];
   \   00000012   0x....             LDR      R1,??DataTable6_1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0x4342             MULS     R2,R0,R2
   \   0000001A   0x5889             LDR      R1,[R1, R2]
   \   0000001C   0x....             LDR      R2,??DataTable6_3  ;; 0x5000050c
   \   0000001E   0x6011             STR      R1,[R2, #+0]
   \   00000020   0xE006             B        ??LedOff_1
    171            }
    172            else
    173            {
    174              NRF_GPIO->OUTSET = Led_au32BitPositions[eLED_];
   \                     ??LedOff_0: (+1)
   \   00000022   0x....             LDR      R1,??DataTable6_1
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x4342             MULS     R2,R0,R2
   \   0000002A   0x5889             LDR      R1,[R1, R2]
   \   0000002C   0x....             LDR      R2,??DataTable6_2  ;; 0x50000508
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    175            }
    176          
    177            /* Always set the LED back to LED_NORMAL_MODE mode */
    178          	Leds_asLedArray[(u8)eLED_].eMode = LED_NORMAL_MODE;
   \                     ??LedOff_1: (+1)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable6
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x2308             MOVS     R3,#+8
   \   00000038   0x4343             MULS     R3,R0,R3
   \   0000003A   0x54D1             STRB     R1,[R2, R3]
    179            
    180          } /* end LedOff() */
   \   0000003C   0xBD00             POP      {PC}             ;; return
    181          
    182          
    183          /*----------------------------------------------------------------------------------------------------------------------
    184          Function: LedToggle
    185          
    186          Description:
    187          Toggle the specified LED.
    188          
    189          Requires:
    190            - eLED_ is a valid LED index
    191            - eLED_ *should* be in LED_NORMAL_MODE
    192          
    193          Promises:
    194            - Requested LED is toggled
    195          */

   \                                 In section .text, align 2, keep-with-next
    196          void LedToggle(LedNumberType eLED_)
    197          {
    198            u32 u32Current_Leds;
    199            
    200            u32Current_Leds = NRF_GPIO->IN;
   \                     LedToggle: (+1)
   \   00000000   0x....             LDR      R1,??DataTable6_4  ;; 0x50000510
   \   00000002   0x6809             LDR      R1,[R1, #+0]
    201            u32Current_Leds ^= Led_au32BitPositions[eLED_];
   \   00000004   0x....             LDR      R2,??DataTable6_1
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2304             MOVS     R3,#+4
   \   0000000A   0x4343             MULS     R3,R0,R3
   \   0000000C   0x58D2             LDR      R2,[R2, R3]
   \   0000000E   0x404A             EORS     R2,R2,R1
    202            NRF_GPIO->OUT = u32Current_Leds;
   \   00000010   0x....             LDR      R1,??DataTable6_5  ;; 0x50000504
   \   00000012   0x600A             STR      R2,[R1, #+0]
    203                                                      
    204          } /* end LedToggle() */
   \   00000014   0x4770             BX       LR               ;; return
    205          
    206          
    207          /*----------------------------------------------------------------------------------------------------------------------
    208          Function: LedPWM
    209          
    210          Description:
    211          Sets an LED to PWM mode
    212          
    213          Requires:
    214            - eLED_ is a valid LED index
    215            - ePwmRate_ is an allowed duty cycle:
    216              LED_PWM_0, LED_PWM_5, LED_PWM_10, ..., LED_PWM_95, LED_PWM_100
    217          
    218          Promises:
    219            - Requested LED is set to PWM mode at the duty cycle specified
    220          */

   \                                 In section .text, align 2, keep-with-next
    221          void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_)
    222          {
   \                     LedPWM: (+1)
   \   00000000   0xB410             PUSH     {R4}
    223          	Leds_asLedArray[(u8)eLED_].eMode = LED_PWM_MODE;
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x....             LDR      R3,??DataTable6
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2408             MOVS     R4,#+8
   \   0000000A   0x4344             MULS     R4,R0,R4
   \   0000000C   0x551A             STRB     R2,[R3, R4]
    224          	Leds_asLedArray[(u8)eLED_].eRate = ePwmRate_;
   \   0000000E   0x....             LDR      R2,??DataTable6
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x2308             MOVS     R3,#+8
   \   00000014   0x4343             MULS     R3,R0,R3
   \   00000016   0x18D2             ADDS     R2,R2,R3
   \   00000018   0x8051             STRH     R1,[R2, #+2]
    225          	Leds_asLedArray[(u8)eLED_].u16Count = (u16)ePwmRate_;
   \   0000001A   0x....             LDR      R2,??DataTable6
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2308             MOVS     R3,#+8
   \   00000020   0x4343             MULS     R3,R0,R3
   \   00000022   0x18D2             ADDS     R2,R2,R3
   \   00000024   0x8091             STRH     R1,[R2, #+4]
    226            Leds_asLedArray[(u8)eLED_].eCurrentDuty = LED_PWM_DUTY_HIGH;
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x....             LDR      R3,??DataTable6
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x2408             MOVS     R4,#+8
   \   0000002E   0x4344             MULS     R4,R0,R4
   \   00000030   0x191B             ADDS     R3,R3,R4
   \   00000032   0x719A             STRB     R2,[R3, #+6]
    227          
    228          } /* end LedPWM() */
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
    229          
    230          
    231          /*----------------------------------------------------------------------------------------------------------------------
    232          Function: LedBlink
    233          
    234          Description:
    235          Sets an LED to BLINK mode.
    236          
    237          Requires:
    238            - eLED_ is a valid LED index
    239            - eBlinkRate_ is an allowed frequency:
    240              LED_0_5HZ, LED_1HZ, LED_2HZ, LED_4HZ, LED_8HZ
    241          
    242          Promises:
    243            - Requested LED is set to BLINK mode at the rate specified
    244          */

   \                                 In section .text, align 2, keep-with-next
    245          void LedBlink(LedNumberType eLED_, LedRateType eBlinkRate_)
    246          {
   \                     LedBlink: (+1)
   \   00000000   0xB410             PUSH     {R4}
    247          	Leds_asLedArray[(u8)eLED_].eMode = LED_BLINK_MODE;
   \   00000002   0x2202             MOVS     R2,#+2
   \   00000004   0x....             LDR      R3,??DataTable6
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2408             MOVS     R4,#+8
   \   0000000A   0x4344             MULS     R4,R0,R4
   \   0000000C   0x551A             STRB     R2,[R3, R4]
    248          	Leds_asLedArray[(u8)eLED_].eRate = eBlinkRate_;
   \   0000000E   0x....             LDR      R2,??DataTable6
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x2308             MOVS     R3,#+8
   \   00000014   0x4343             MULS     R3,R0,R3
   \   00000016   0x18D2             ADDS     R2,R2,R3
   \   00000018   0x8051             STRH     R1,[R2, #+2]
    249          	Leds_asLedArray[(u8)eLED_].u16Count = eBlinkRate_;
   \   0000001A   0x....             LDR      R2,??DataTable6
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2308             MOVS     R3,#+8
   \   00000020   0x4343             MULS     R3,R0,R3
   \   00000022   0x18D2             ADDS     R2,R2,R3
   \   00000024   0x8091             STRH     R1,[R2, #+4]
    250          
    251          } /* end LedBlink() */
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    252          
    253          
    254          /*--------------------------------------------------------------------------------------------------------------------*/
    255          /* Protected functions */
    256          /*--------------------------------------------------------------------------------------------------------------------*/
    257          
    258          /*----------------------------------------------------------------------------------------------------------------------
    259          Function: LedInitialize
    260          
    261          Description:
    262          Initialization of LED system paramters and visual LED check.
    263          
    264          Requires:
    265            - G_u32SystemTime1ms ticking
    266            - All LEDs already initialized to LED_NORMAL_MODE mode ON
    267          
    268          Promises:
    269            - All LEDs in LED_NORMAL_MODE mode with OFF
    270          */

   \                                 In section .text, align 2, keep-with-next
    271          void LedInitialize(void)
    272          {
   \                     LedInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    273            u32 u32Timer;
    274            LedNumberType aeLedSequenceHome[] = {HOME1, HOME2, HOME3, HOME6, HOME9, HOME8, HOME7, HOME4};
   \   00000004   0xA802             ADD      R0,SP,#+8
   \   00000006   0x....             LDR      R1,??DataTable6_6
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    275            LedNumberType aeLedSequenceAway[] = {AWAY1, AWAY4, AWAY7, AWAY8, AWAY9, AWAY6, AWAY3, AWAY2};
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x....             LDR      R1,??DataTable6_7
   \   00000014   0xC90C             LDM      R1!,{R2,R3}
   \   00000016   0xC00C             STM      R0!,{R2,R3}
   \   00000018   0x3908             SUBS     R1,R1,#+8
   \   0000001A   0x3808             SUBS     R0,R0,#+8
    276            
    277            /* All status lights on */
    278            //LedOn(STATUS_RED);
    279            //LedOn(STATUS_YLW);
    280            //LedOn(STATUS_GRN);
    281          
    282          //#if 0 /* Picture mode */
    283            LedOn(HOME1);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       LedOn
    284            LedOn(HOME5);
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0x.... 0x....      BL       LedOn
    285            LedOn(HOME7);
   \   00000028   0x2006             MOVS     R0,#+6
   \   0000002A   0x.... 0x....      BL       LedOn
    286            LedOn(HOME2);
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       LedOn
    287            LedOn(AWAY9);
   \   00000034   0x2011             MOVS     R0,#+17
   \   00000036   0x.... 0x....      BL       LedOn
    288            LedOn(AWAY4);
   \   0000003A   0x200C             MOVS     R0,#+12
   \   0000003C   0x.... 0x....      BL       LedOn
    289            LedOn(AWAY6);
   \   00000040   0x200E             MOVS     R0,#+14
   \   00000042   0x.... 0x....      BL       LedOn
    290            LedOn(AWAY8);
   \   00000046   0x2010             MOVS     R0,#+16
   \   00000048   0x.... 0x....      BL       LedOn
    291          
    292            while(1);
   \                     ??LedInitialize_0: (+1)
   \   0000004C   0xE7FE             B        ??LedInitialize_0
    293          //#endif
    294          
    295            LedOff(HOME5);
                   ^
Warning[Pe111]: statement is unreachable

    u32 u32Timer;
        ^
"C:\Users\Vipin\Documents\GitHub\ANTTT\bsp\leds_anttt.c",273  Warning[Pe177]: 
          variable "u32Timer" was declared but never referenced
    296            LedOn(AWAY5);
    297            
    298            
    299            //while (1)
    300            //{
    301              /* Sequentially light up the LEDs */
    302              for(u8 i = 0; i < 8; i++)
    303              {
    304                LedToggle(HOME5);
    305                LedToggle(AWAY5);
    306                LedOn(aeLedSequenceHome[i]);
    307                LedOn(aeLedSequenceAway[i]);
    308                for(u32 j = 0; j < 200000; j++);
    309                LedOff(aeLedSequenceHome[i]);
    310                LedOff(aeLedSequenceAway[i]);
    311              }
    312            //}
    313          
    314          #if 0
    315            /* Sequentially light up the LEDs */
    316            for(u8 i = 0; i < 18; i++)
    317            {
    318              LedOn(aeLedSequence[i]);
    319              for(u32 j = 0; j < 300000; j++);
    320            }
    321          #endif
    322          
    323            /* Pause for show */
    324            for(u32 i = 0; i < 2000000; i++);
    325          
    326          #if 0
    327            /* Turn all LEDs on full, then fade them out over a few seconds */
    328            for(u8 i = 20; i > 0; i--)
    329            {
    330              
    331              /* Spend 40ms in each level of intensity */
    332              for(u16 j = 40; j > 0; j--)
    333              {
    334                u32Timer = G_u32SystemTime1ms;
    335                while( !IsTimeUp(&u32Timer, 1) );
    336                LedUpdate();
    337              }
    338              /* Pause for a bit on the first iteration to show the LEDs on for little while */
    339              if(i == 20)
    340              {
    341                while( !IsTimeUp(&u32Timer, 1500) );
    342              }
    343              
    344              /* Set the LED intensity for the next iteration */
    345              for(u8 j = 0; j < TOTAL_LEDS; j++)
    346              {
    347                Leds_asLedArray[j].eRate = (LedRateType)(i - 1);
    348              }
    349            }
    350          
    351            /* Final update to set last state, hold for a short period */
    352            LedUpdate();
    353            while( !IsTimeUp(&u32Timer, 200) );
    354          #endif
    355            
    356          } /* end LedInitialize() */
    357          
    358          
    359          /*--------------------------------------------------------------------------------------------------------------------*/
    360          /* Private functions */
    361          /*--------------------------------------------------------------------------------------------------------------------*/
    362          
    363          /*----------------------------------------------------------------------------------------------------------------------
    364          Function: LedUpdate
    365          
    366          Description:
    367          Update all LEDs for the current cycle.
    368          
    369          Requires:
    370           - G_u32SystemTime1ms is counting
    371          
    372          Promises:
    373             - All LEDs updated based on their counters
    374          */

   \                                 In section .text, align 2, keep-with-next
    375          void LedUpdate(void)
    376          {
   \                     LedUpdate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    377          	/* Loop through each LED */
    378            for(u8 i = 0; i < TOTAL_LEDS; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??LedUpdate_0: (+1)
   \   00000004   0xB2E4             UXTB     R4,R4
   \   00000006   0x2C15             CMP      R4,#+21
   \   00000008   0xDB00             BLT      .+4
   \   0000000A   0xE0A6             B        ??LedUpdate_1
    379            {
    380              /* Check if LED is PWMing */
    381              if(Leds_asLedArray[(LedNumberType)i].eMode == LED_PWM_MODE)
   \   0000000C   0x....             LDR      R0,??DataTable6
   \   0000000E   0xB2E4             UXTB     R4,R4
   \   00000010   0x2108             MOVS     R1,#+8
   \   00000012   0x4361             MULS     R1,R4,R1
   \   00000014   0x5C40             LDRB     R0,[R0, R1]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD171             BNE      ??LedUpdate_2
    382              {
    383                /* Handle special case of 0% duty cycle */
    384                if( Leds_asLedArray[i].eRate == LED_PWM_0 )
   \   0000001A   0x....             LDR      R0,??DataTable6
   \   0000001C   0xB2E4             UXTB     R4,R4
   \   0000001E   0x2108             MOVS     R1,#+8
   \   00000020   0x4361             MULS     R1,R4,R1
   \   00000022   0x1840             ADDS     R0,R0,R1
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x5E40             LDRSH    R0,[R0, R1]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD104             BNE      ??LedUpdate_3
    385                {
    386                  LedOff( (LedNumberType)i );
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       LedOff
   \   00000034   0xE05C             B        ??LedUpdate_4
    387                }
    388                
    389                /* Handle special case of 100% duty cycle */
    390                else if( Leds_asLedArray[i].eRate == LED_PWM_100 )
   \                     ??LedUpdate_3: (+1)
   \   00000036   0x....             LDR      R0,??DataTable6
   \   00000038   0xB2E4             UXTB     R4,R4
   \   0000003A   0x2108             MOVS     R1,#+8
   \   0000003C   0x4361             MULS     R1,R4,R1
   \   0000003E   0x1840             ADDS     R0,R0,R1
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x5E40             LDRSH    R0,[R0, R1]
   \   00000044   0x2814             CMP      R0,#+20
   \   00000046   0xD104             BNE      ??LedUpdate_5
    391                {
    392                  LedOn( (LedNumberType)i );
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x.... 0x....      BL       LedOn
   \   00000050   0xE04E             B        ??LedUpdate_4
    393                }
    394            
    395                /* Otherwise, regular PWM: decrement counter; toggle and reload if counter reaches 0 */
    396                else
    397                {
    398                  if(--Leds_asLedArray[(LedNumberType)i].u16Count == 0)
   \                     ??LedUpdate_5: (+1)
   \   00000052   0x....             LDR      R0,??DataTable6
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x2108             MOVS     R1,#+8
   \   00000058   0x4361             MULS     R1,R4,R1
   \   0000005A   0x1840             ADDS     R0,R0,R1
   \   0000005C   0x8880             LDRH     R0,[R0, #+4]
   \   0000005E   0x1E40             SUBS     R0,R0,#+1
   \   00000060   0x....             LDR      R1,??DataTable6
   \   00000062   0xB2E4             UXTB     R4,R4
   \   00000064   0x2208             MOVS     R2,#+8
   \   00000066   0x4362             MULS     R2,R4,R2
   \   00000068   0x1889             ADDS     R1,R1,R2
   \   0000006A   0x8088             STRH     R0,[R1, #+4]
   \   0000006C   0x....             LDR      R0,??DataTable6
   \   0000006E   0xB2E4             UXTB     R4,R4
   \   00000070   0x2108             MOVS     R1,#+8
   \   00000072   0x4361             MULS     R1,R4,R1
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0x8880             LDRH     R0,[R0, #+4]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD139             BNE      ??LedUpdate_4
    399                  {
    400                    if(Leds_asLedArray[(LedNumberType)i].eCurrentDuty == LED_PWM_DUTY_HIGH)
   \   0000007C   0x....             LDR      R0,??DataTable6
   \   0000007E   0xB2E4             UXTB     R4,R4
   \   00000080   0x2108             MOVS     R1,#+8
   \   00000082   0x4361             MULS     R1,R4,R1
   \   00000084   0x1840             ADDS     R0,R0,R1
   \   00000086   0x7980             LDRB     R0,[R0, #+6]
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD11A             BNE      ??LedUpdate_6
    401                    {
    402                      /* Turn the LED off and update the counters for the next cycle */
    403                      LedOff( (LedNumberType)i );
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0xB2C0             UXTB     R0,R0
   \   00000090   0x.... 0x....      BL       LedOff
    404                      Leds_asLedArray[(LedNumberType)i].u16Count = LED_PWM_PERIOD - Leds_asLedArray[(LedNumberType)i].eRate;
   \   00000094   0x2014             MOVS     R0,#+20
   \   00000096   0x....             LDR      R1,??DataTable6
   \   00000098   0xB2E4             UXTB     R4,R4
   \   0000009A   0x2208             MOVS     R2,#+8
   \   0000009C   0x4362             MULS     R2,R4,R2
   \   0000009E   0x1889             ADDS     R1,R1,R2
   \   000000A0   0x2202             MOVS     R2,#+2
   \   000000A2   0x5E89             LDRSH    R1,[R1, R2]
   \   000000A4   0x1A40             SUBS     R0,R0,R1
   \   000000A6   0x....             LDR      R1,??DataTable6
   \   000000A8   0xB2E4             UXTB     R4,R4
   \   000000AA   0x2208             MOVS     R2,#+8
   \   000000AC   0x4362             MULS     R2,R4,R2
   \   000000AE   0x1889             ADDS     R1,R1,R2
   \   000000B0   0x8088             STRH     R0,[R1, #+4]
    405                      Leds_asLedArray[(LedNumberType)i].eCurrentDuty = LED_PWM_DUTY_LOW;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x....             LDR      R1,??DataTable6
   \   000000B6   0xB2E4             UXTB     R4,R4
   \   000000B8   0x2208             MOVS     R2,#+8
   \   000000BA   0x4362             MULS     R2,R4,R2
   \   000000BC   0x1889             ADDS     R1,R1,R2
   \   000000BE   0x7188             STRB     R0,[R1, #+6]
   \   000000C0   0xE016             B        ??LedUpdate_4
    406                    }
    407                    else
    408                    {
    409                      /* Turn the LED on and update the counters for the next cycle */
    410                      LedOn( (LedNumberType)i );
   \                     ??LedUpdate_6: (+1)
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0xB2C0             UXTB     R0,R0
   \   000000C6   0x.... 0x....      BL       LedOn
    411                      Leds_asLedArray[i].u16Count = Leds_asLedArray[i].eRate;
   \   000000CA   0x....             LDR      R0,??DataTable6
   \   000000CC   0xB2E4             UXTB     R4,R4
   \   000000CE   0x2108             MOVS     R1,#+8
   \   000000D0   0x4361             MULS     R1,R4,R1
   \   000000D2   0x1840             ADDS     R0,R0,R1
   \   000000D4   0x8840             LDRH     R0,[R0, #+2]
   \   000000D6   0x....             LDR      R1,??DataTable6
   \   000000D8   0xB2E4             UXTB     R4,R4
   \   000000DA   0x2208             MOVS     R2,#+8
   \   000000DC   0x4362             MULS     R2,R4,R2
   \   000000DE   0x1889             ADDS     R1,R1,R2
   \   000000E0   0x8088             STRH     R0,[R1, #+4]
    412                      Leds_asLedArray[i].eCurrentDuty = LED_PWM_DUTY_HIGH;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x....             LDR      R1,??DataTable6
   \   000000E6   0xB2E4             UXTB     R4,R4
   \   000000E8   0x2208             MOVS     R2,#+8
   \   000000EA   0x4362             MULS     R2,R4,R2
   \   000000EC   0x1889             ADDS     R1,R1,R2
   \   000000EE   0x7188             STRB     R0,[R1, #+6]
    413                    }
    414                  }
    415                }
    416          
    417                /* Set the LED back to PWM mode since LedOff and LedOn set it to normal mode */
    418               	Leds_asLedArray[(LedNumberType)i].eMode = LED_PWM_MODE;
   \                     ??LedUpdate_4: (+1)
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x....             LDR      R1,??DataTable6
   \   000000F4   0xB2E4             UXTB     R4,R4
   \   000000F6   0x2208             MOVS     R2,#+8
   \   000000F8   0x4362             MULS     R2,R4,R2
   \   000000FA   0x5488             STRB     R0,[R1, R2]
   \   000000FC   0xE02B             B        ??LedUpdate_7
    419                
    420              } /* end if PWM mode */
    421              
    422              /* LED is in LED_BLINK_MODE mode */
    423              else if(Leds_asLedArray[(LedNumberType)i].eMode == LED_BLINK_MODE)
   \                     ??LedUpdate_2: (+1)
   \   000000FE   0x....             LDR      R0,??DataTable6
   \   00000100   0xB2E4             UXTB     R4,R4
   \   00000102   0x2108             MOVS     R1,#+8
   \   00000104   0x4361             MULS     R1,R4,R1
   \   00000106   0x5C40             LDRB     R0,[R0, R1]
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD124             BNE      ??LedUpdate_7
    424              {
    425                /* Decrement counter; toggle and reload if counter reaches 0 */
    426                if( --Leds_asLedArray[(LedNumberType)i].u16Count == 0)
   \   0000010C   0x....             LDR      R0,??DataTable6
   \   0000010E   0xB2E4             UXTB     R4,R4
   \   00000110   0x2108             MOVS     R1,#+8
   \   00000112   0x4361             MULS     R1,R4,R1
   \   00000114   0x1840             ADDS     R0,R0,R1
   \   00000116   0x8880             LDRH     R0,[R0, #+4]
   \   00000118   0x1E40             SUBS     R0,R0,#+1
   \   0000011A   0x....             LDR      R1,??DataTable6
   \   0000011C   0xB2E4             UXTB     R4,R4
   \   0000011E   0x2208             MOVS     R2,#+8
   \   00000120   0x4362             MULS     R2,R4,R2
   \   00000122   0x1889             ADDS     R1,R1,R2
   \   00000124   0x8088             STRH     R0,[R1, #+4]
   \   00000126   0x....             LDR      R0,??DataTable6
   \   00000128   0xB2E4             UXTB     R4,R4
   \   0000012A   0x2108             MOVS     R1,#+8
   \   0000012C   0x4361             MULS     R1,R4,R1
   \   0000012E   0x1840             ADDS     R0,R0,R1
   \   00000130   0x8880             LDRH     R0,[R0, #+4]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD10F             BNE      ??LedUpdate_7
    427                {
    428                  LedToggle( (LedNumberType)i );
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0xB2C0             UXTB     R0,R0
   \   0000013A   0x.... 0x....      BL       LedToggle
    429                  Leds_asLedArray[(LedNumberType)i].u16Count = Leds_asLedArray[(LedNumberType)i].eRate;
   \   0000013E   0x....             LDR      R0,??DataTable6
   \   00000140   0xB2E4             UXTB     R4,R4
   \   00000142   0x2108             MOVS     R1,#+8
   \   00000144   0x4361             MULS     R1,R4,R1
   \   00000146   0x1840             ADDS     R0,R0,R1
   \   00000148   0x8840             LDRH     R0,[R0, #+2]
   \   0000014A   0x....             LDR      R1,??DataTable6
   \   0000014C   0xB2E4             UXTB     R4,R4
   \   0000014E   0x2208             MOVS     R2,#+8
   \   00000150   0x4362             MULS     R2,R4,R2
   \   00000152   0x1889             ADDS     R1,R1,R2
   \   00000154   0x8088             STRH     R0,[R1, #+4]
    430                }
    431              }
    432            } /* end for */
   \                     ??LedUpdate_7: (+1)
   \   00000156   0x1C64             ADDS     R4,R4,#+1
   \   00000158   0xE754             B        ??LedUpdate_0
    433          } /* end LedUpdate() */
   \                     ??LedUpdate_1: (+1)
   \   0000015A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     Leds_asLedArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     Led_au32BitPositions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x50000508         DC32     0x50000508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x5000050C         DC32     0x5000050c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x50000510         DC32     0x50000510

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x50000504         DC32     0x50000504

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 5, 8, 7, 6, 3
   \              0x02 0x05    
   \              0x08 0x07    
   \              0x06 0x03    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x09 0x0C          DC8 9, 12, 15, 16, 17, 14, 11, 10
   \              0x0F 0x10    
   \              0x11 0x0E    
   \              0x0B 0x0A    
    434          
    435          
    436          /*--------------------------------------------------------------------------------------------------------------------*/
    437          /* End of File */
    438          /*--------------------------------------------------------------------------------------------------------------------*/
    439          
    440          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   LedBlink
      24   LedInitialize
        24   -> LedOn
       4   LedOff
       4   LedOn
       4   LedPWM
       0   LedToggle
       8   LedUpdate
         8   -> LedOff
         8   -> LedOn
         8   -> LedToggle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       8  ?_0
       8  ?_1
      42  LedBlink
      78  LedInitialize
      62  LedOff
      62  LedOn
      56  LedPWM
      22  LedToggle
     348  LedUpdate
      84  Led_au32BitPositions
     168  Leds_asLedArray

 
 252 bytes in section .data
  16 bytes in section .rodata
 702 bytes in section .text
 
 702 bytes of CODE  memory
  16 bytes of CONST memory
 252 bytes of DATA  memory

Errors: none
Warnings: 2
